{"version":3,"file":"cleanup.js","names":["PROMISE_RESOLVE_TRUE","getFromMapOrCreate","REPLICATION_STATE_BY_COLLECTION","DEFAULT_CLEANUP_POLICY","runAsyncPluginHooks","firstValueFrom","RXSTORAGE_CLEANUP_QUEUE","startCleanupForRxCollection","rxCollection","rxDatabase","database","cleanupPolicy","Object","assign","initialCleanupWait","closed","cleanupRxCollection","runCleanupAfterDelete","collection","promiseWait","minimumCollectionAge","multiInstance","waitForLeadership","storageInstance","isDone","awaitReplicationsInSync","replicationStates","Promise","all","map","replicationState","isStopped","awaitInSync","then","requestIdlePromise","allDone","push","cleanup","minimumDeletedTime","meta","metaInstance","hasFalse","find","v","collectionName","name","databaseName","eventBulks$","catch","runEach"],"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types/index.d.ts';\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../../plugins/utils/index.ts';\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication/index.ts';\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper.ts';\nimport { runAsyncPluginHooks } from '../../hooks.ts';\nimport { filter, firstValueFrom } from 'rxjs';\n\n/**\n * Even on multiple databases,\n * the calls to RxStorage().cleanup()\n * must never run in parallel.\n * The cleanup is a background task which should\n * not affect the performance of other, more important tasks.\n */\nlet RXSTORAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\n\nexport async function startCleanupForRxCollection(\n    rxCollection: RxCollection\n) {\n    const rxDatabase = rxCollection.database;\n    const cleanupPolicy = Object.assign(\n        {},\n        DEFAULT_CLEANUP_POLICY,\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\n    );\n\n\n    await initialCleanupWait(rxCollection, cleanupPolicy);\n    if (rxCollection.closed) {\n        return;\n    }\n\n    // initially cleanup the collection\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\n\n    /**\n     * Afterwards we listen to deletes\n     * and only re-run the cleanup after\n     * minimumDeletedTime is reached.\n     */\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\n}\n\n\nexport async function initialCleanupWait(collection: RxCollection, cleanupPolicy: RxCleanupPolicy) {\n    /**\n     * Wait until minimumDatabaseInstanceAge is reached\n     * or collection is closed.\n     */\n    await collection.promiseWait(cleanupPolicy.minimumCollectionAge);\n    if (collection.closed) {\n        return;\n    }\n\n    if (collection.database.multiInstance && cleanupPolicy.waitForLeadership) {\n        await collection.database.waitForLeadership();\n    }\n}\n\n/**\n * Runs the cleanup for a single RxCollection\n */\nexport async function cleanupRxCollection(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    const rxDatabase = rxCollection.database;\n    const storageInstance = rxCollection.storageInstance;\n\n    // run cleanup() until it returns true\n    let isDone = false;\n    while (!isDone && !rxCollection.closed) {\n        if (cleanupPolicy.awaitReplicationsInSync) {\n            const replicationStates = getFromMapOrCreate(\n                REPLICATION_STATE_BY_COLLECTION,\n                rxCollection,\n                () => []\n            );\n            await Promise.all(\n                replicationStates.map(replicationState => {\n                    if (!replicationState.isStopped()) {\n                        return replicationState.awaitInSync();\n                    }\n                })\n            );\n        }\n        if (rxCollection.closed) {\n            return;\n        }\n        RXSTORAGE_CLEANUP_QUEUE = RXSTORAGE_CLEANUP_QUEUE\n            .then(async () => {\n                if (rxCollection.closed) {\n                    return true;\n                }\n                await rxDatabase.requestIdlePromise();\n                const allDone: Promise<boolean>[] = [];\n                allDone.push(storageInstance.cleanup(cleanupPolicy.minimumDeletedTime));\n                const replicationStates = getFromMapOrCreate(\n                    REPLICATION_STATE_BY_COLLECTION,\n                    rxCollection,\n                    () => []\n                );\n                for (const replicationState of replicationStates) {\n                    const meta = replicationState.metaInstance;\n                    if (meta) {\n                        allDone.push(meta.cleanup(cleanupPolicy.minimumDeletedTime));\n                    }\n                }\n\n                const hasFalse = (await Promise.all(allDone)).find(v => !v);\n                return !hasFalse;\n            });\n        isDone = await RXSTORAGE_CLEANUP_QUEUE;\n    }\n    await runAsyncPluginHooks('postCleanup', {\n        collectionName: rxCollection.name,\n        databaseName: rxDatabase.name\n    });\n}\n\nexport async function runCleanupAfterDelete(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    while (!rxCollection.closed) {\n        /**\n         * In theory we should wait here until a document is deleted.\n         * But this would mean we have to search through all events ever processed.\n         * So instead we just wait for any write event and then we anyway throttle\n         * the calls with the promiseWait() below.\n         */\n        await firstValueFrom(rxCollection.eventBulks$).catch(() => { });\n\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\n        if (rxCollection.closed) {\n            return;\n        }\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\n    }\n}\n"],"mappings":"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","ignoreList":[]}