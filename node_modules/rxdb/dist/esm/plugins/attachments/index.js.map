{"version":3,"file":"index.js","names":["map","blobToBase64String","blobToString","createBlobFromBase64","flatClone","getBlobSize","PROMISE_RESOLVE_VOID","assignMethodsToAttachment","ensureSchemaSupportsAttachments","RxAttachment","doc","id","type","length","digest","_proto","prototype","remove","collection","incrementalWriteQueue","addWrite","_data","docWriteData","_attachments","then","getData","plainDataBase64","getDataBase64","ret","getStringData","data","asString","storageInstance","getAttachmentData","primary","fromStorageInstanceResult","attachmentData","rxDocument","putAttachment","dataSize","dataString","putAttachmentBase64","database","hashFunction","writeResult","newDocument","_docCache","getCachedRxDocument","attachmentDataOfId","attachment","getAttachment","docData","allAttachments","Object","keys","preMigrateDocument","attachments","newAttachments","Promise","all","attachmentId","docPrimary","oldCollection","schema","primaryPath","rawAttachmentData","postMigrateDocument","_action","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","defineProperty","get","allAttachments$","$","pipe","entries","toJSON","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs';\n\nimport {\n    blobToBase64String,\n    blobToString,\n    createBlobFromBase64,\n    flatClone,\n    getBlobSize,\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils/index.ts';\nimport type {\n    RxDocument,\n    RxPlugin,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData,\n    RxCollection,\n    RxAttachmentCreatorBase64\n} from '../../types/index.ts';\nimport {\n    assignMethodsToAttachment,\n    ensureSchemaSupportsAttachments\n} from './attachments-utils.ts';\n\n\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        return this.doc.collection.incrementalWriteQueue.addWrite(\n            this.doc._data,\n            docWriteData => {\n                delete docWriteData._attachments[this.id];\n                return docWriteData;\n            }\n        ).then(() => { });\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<Blob> {\n        const plainDataBase64 = await this.getDataBase64();\n        const ret = await createBlobFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobToString(data);\n        return asString;\n    }\n\n    async getDataBase64(): Promise<string> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id,\n            this.digest\n        );\n        return plainDataBase64;\n    }\n}\n\nexport function fromStorageInstanceResult<RxDocType>(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument<RxDocType>\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\n\n\nexport async function putAttachment<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreator\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = getBlobSize(attachmentData.data);\n    const dataString = await blobToBase64String(attachmentData.data);\n\n    return this.putAttachmentBase64({\n        id: attachmentData.id,\n        length: dataSize,\n        type: attachmentData.type,\n        data: dataString\n    }) as any;\n}\n\nexport async function putAttachmentBase64<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreatorBase64\n) {\n    ensureSchemaSupportsAttachments(this);\n    const digest = await this.collection.database.hashFunction(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = attachmentData.data;\n\n    return this.collection.incrementalWriteQueue.addWrite(\n        this._data,\n        (docWriteData: RxDocumentWriteData<RxDocType>) => {\n            docWriteData = flatClone(docWriteData);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n            docWriteData._attachments[id] = {\n                length: attachmentData.length,\n                type,\n                data,\n                digest\n            };\n            return docWriteData;\n        }).then(writeResult => {\n            const newDocument = this.collection._docCache.getCachedRxDocument(writeResult);\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                newDocument\n            );\n            return attachment;\n        });\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: RxCollection<RxDocType>;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(\n                    docPrimary,\n                    attachmentId,\n                    attachment.digest\n                );\n                const digest = await data.oldCollection.database.hashFunction(rawAttachmentData);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData,\n                    digest\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.putAttachmentBase64 = putAttachmentBase64;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$(this: RxDocument) {\n                    return this.$\n                        .pipe(\n                            map(rxDocument => Object.entries(\n                                rxDocument.toJSON(true)._attachments\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n\n\nexport * from './attachments-utils.ts';\n"],"mappings":"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","ignoreList":[]}