{"version":3,"file":"rx-state.js","names":["Subject","distinctUntilChanged","map","merge","shareReplay","startWith","tap","overwritable","getChangedDocumentsSince","RXJS_SHARE_REPLAY_DEFAULTS","getProperty","setProperty","PROMISE_RESOLVE_VOID","appendToArray","clone","randomToken","deepEqual","getFromMapOrCreate","RX_STATE_COLLECTION_SCHEMA","isValidWeakMapKey","nextRxStateId","newRxError","runPluginHooks","debugId","deepFrozenCache","WeakMap","RxStateBase","prefix","collection","_id","_state","_nonPersisted","_writeQueue","_initDone","_instanceId","properties","sId","maxLength","_ownEmits$","onClose","push","_lastIdQuery","findOne","sort","id","$","subscribe","eventBulks$","pipe","eventBulk","events","index","length","event","operation","documentData","mergeOperationsIntoState","ops","_proto","prototype","set","path","modifier","_triggerWrite","then","useWrites","done","lastIdDoc","exec","nextId","undefined","newState","writeRow","value","newValue","k","v","insert","next","err","code","catch","error","name","operations","state","get","ret","isDevMode","frozen","deepFreezeWhenDevMode","get$","get$$","obs","reactivity","database","getReactivityFactory","fromObservable","_cleanup","firstWrite","lastWrite","firstNr","parseInt","lastNr","find","selector","$lte","remove","createRxState","collectionName","addCollections","schema","collections","rxState","checkpoint","result","storageInstance","documents","document","proxy","Proxy","target","property","bind","lastChar","charAt","endsWith","key","slice","receiver","Error"],"sources":["../../../../src/plugins/state/rx-state.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    distinctUntilChanged,\n    map,\n    merge,\n    shareReplay,\n    startWith,\n    tap\n} from 'rxjs';\nimport { overwritable } from '../../overwritable.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport type {\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxError,\n    Paths\n} from '../../types';\nimport {\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getProperty,\n    setProperty,\n    PROMISE_RESOLVE_VOID,\n    appendToArray,\n    clone,\n    randomToken,\n    deepEqual,\n    getFromMapOrCreate\n} from '../utils/index.ts';\nimport {\n    RX_STATE_COLLECTION_SCHEMA,\n    isValidWeakMapKey,\n    nextRxStateId\n} from './helpers.ts';\nimport {\n    RxStateDocument,\n    RxStateOperation,\n    RxStateModifier\n} from './types.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport { runPluginHooks } from '../../hooks.ts';\n\n\nlet debugId = 0;\n\n\nconst deepFrozenCache = new WeakMap<any, any>();\n\n/**\n * RxDB internally used properties are\n * prefixed with lodash _ to make them less\n * likely to clash with actual state properties\n * from the user.\n */\nexport class RxStateBase<T, Reactivity = unknown> {\n    // used for debugging\n    public _id: number = debugId++;\n    public _state: T | any = {};\n    public $: Observable<T>;\n    public _lastIdQuery: RxQuery<RxStateDocument, RxDocument<RxStateDocument, {}> | null>;\n    public _nonPersisted: {\n        path: string;\n        modifier: RxStateModifier;\n    }[] = [];\n    public _writeQueue = PROMISE_RESOLVE_VOID;\n    public _initDone = false;\n    public _instanceId = randomToken(RX_STATE_COLLECTION_SCHEMA.properties.sId.maxLength);\n    public _ownEmits$ = new Subject<T>();\n\n    constructor(\n        public readonly prefix: string,\n        public readonly collection: RxCollection<RxStateDocument>\n    ) {\n        this.collection.onClose.push(() => this._writeQueue);\n        this._lastIdQuery = this.collection.findOne({\n            sort: [\n                { id: 'desc' }\n            ]\n        });\n        // make it \"hot\" for better write performance\n        this._lastIdQuery.$.subscribe();\n\n        this.$ = merge(\n            this._ownEmits$,\n            this.collection.eventBulks$.pipe(\n                tap(eventBulk => {\n                    if (!this._initDone) {\n                        return;\n                    }\n                    const events = eventBulk.events;\n                    for (let index = 0; index < events.length; index++) {\n                        const event = events[index];\n                        if (\n                            event.operation === 'INSERT' &&\n                            event.documentData.sId !== this._instanceId\n                        ) {\n                            this.mergeOperationsIntoState(event.documentData.ops);\n                        }\n                    }\n                })\n            )\n        ).pipe(\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n            map(() => this._state)\n        );\n        // directly subscribe because of the tap() side effect\n        this.$.subscribe();\n    }\n\n    async set(\n        path: Paths<T> | '',\n        modifier: RxStateModifier\n    ) {\n        this._nonPersisted.push({\n            path,\n            modifier\n        });\n        return this._triggerWrite();\n    }\n\n    /**\n     * To have deterministic writes,\n     * and to ensure that multiple js realms do not overwrite\n     * each other, the write happens with incremental ids\n     * that would throw conflict errors and trigger a retry.\n     */\n    _triggerWrite() {\n        this._writeQueue = this._writeQueue.then(async () => {\n            if (this._nonPersisted.length === 0) {\n                return;\n            }\n            let useWrites: typeof this._nonPersisted = [];\n            let done = false;\n            while (!done) {\n                const lastIdDoc = await this._lastIdQuery.exec();\n                appendToArray(useWrites, this._nonPersisted);\n                this._nonPersisted = [];\n                const nextId = nextRxStateId(lastIdDoc ? lastIdDoc.id : undefined);\n                try {\n                    /**\n                     * TODO instead of a deep-clone we should\n                     * only clone the parts where we know that they\n                     * will be changed. This would improve performance.\n                     */\n                    let newState = clone(this._state);\n                    const ops: RxStateOperation[] = [];\n                    for (let index = 0; index < useWrites.length; index++) {\n                        const writeRow = useWrites[index];\n                        const value = getProperty(newState, writeRow.path);\n                        const newValue = writeRow.modifier(value);\n                        /**\n                         * Here we have to clone the value because\n                         * some storages like the memory storage\n                         * make input data deep-frozen in dev-mode.\n                         */\n                        if (writeRow.path === '') {\n                            newState = clone(newValue);\n                        } else {\n                            setProperty(newState, writeRow.path, clone(newValue));\n                        }\n                        ops.push({\n                            k: writeRow.path,\n                            /**\n                             * Here we have to clone the value because\n                             * some storages like the memory storage\n                             * make input data deep-frozen in dev-mode.\n                             */\n                            v: clone(newValue)\n                        });\n                    }\n                    await this.collection.insert({\n                        id: nextId,\n                        sId: this._instanceId,\n                        ops\n                    });\n                    this._state = newState;\n                    this._ownEmits$.next(this._state);\n                    done = true;\n                } catch (err) {\n                    if ((err as RxError).code !== 'CONFLICT') {\n                        throw err;\n                    }\n                }\n            }\n        }).catch(error => {\n            throw newRxError('SNH', {\n                name: 'RxState WRITE QUEUE ERROR',\n                error\n            });\n        });\n        return this._writeQueue;\n    }\n\n    mergeOperationsIntoState(\n        operations: RxStateOperation[]\n    ) {\n        let state = clone(this._state);\n        for (let index = 0; index < operations.length; index++) {\n            const operation = operations[index];\n            if (operation.k === '') {\n                state = clone(operation.v);\n            } else {\n                setProperty(state, operation.k, clone(operation.v));\n            }\n        }\n        this._state = state;\n    }\n    get(path?: Paths<T>) {\n        let ret;\n        if (!path) {\n            ret = this._state;\n        } else {\n            ret = getProperty(this._state, path);\n        }\n\n        /**\n         * In dev-mode we have to clone the value before deep-freezing\n         * it to not have an immutable subobject in the state value.\n         * But calling .get() with the same path multiple times,\n         * should return exactly the same object instance\n         * so it does not cause re-renders on react.\n         * So in dev-mode we have to \n         */\n        if (overwritable.isDevMode() && isValidWeakMapKey(ret)) {\n            const frozen = getFromMapOrCreate(\n                deepFrozenCache,\n                ret,\n                () => overwritable.deepFreezeWhenDevMode(clone(ret))\n            );\n            return frozen;\n        }\n\n        return ret;\n    }\n    get$(path?: Paths<T>): Observable<any> {\n        return this.$.pipe(\n            map(() => this.get(path)),\n            startWith(this.get(path)),\n            distinctUntilChanged(deepEqual),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n        );\n    }\n    get$$(path?: Paths<T>): Reactivity {\n        const obs = this.get$(path);\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            obs,\n            this.get(path),\n            this.collection.database\n        ) as any;\n    }\n\n    /**\n     * Merges the state operations into a single write row\n     * to store space and make recreating the state from\n     * disc faster.\n     */\n    async _cleanup() {\n        const firstWrite = await this.collection.findOne({\n            sort: [{ id: 'asc' }]\n        }).exec();\n        const lastWrite = await this._lastIdQuery.exec();\n\n        if (!firstWrite || !lastWrite) {\n            return;\n        }\n\n        const firstNr = parseInt(firstWrite.id, 10);\n        const lastNr = parseInt(lastWrite.id, 10);\n        if ((lastNr - 5) < firstNr) {\n            // only run if more then 5 write rows\n            return;\n        }\n\n        // update whole state object\n        await this._writeQueue;\n        await this.set('', () => this._state);\n\n        // delete old ones\n        await this.collection.find({\n            selector: {\n                id: {\n                    $lte: lastWrite.id\n                }\n            }\n        }).remove();\n    }\n}\n\n\nexport async function createRxState<T>(\n    database: RxDatabase,\n    prefix: string\n): Promise<RxStateBase<T>> {\n    const collectionName = 'rx-state-' + prefix;\n    await database.addCollections({\n        [collectionName]: {\n            schema: RX_STATE_COLLECTION_SCHEMA as any\n        }\n    });\n    const collection: RxCollection<RxStateDocument> = database.collections[collectionName];\n\n    const rxState = new RxStateBase<T>(\n        prefix,\n        collection\n    );\n\n\n    /**\n     * Directly get the state and put it into memory.\n     * This ensures we can do non-async accesses to the\n     * correct state.\n     */\n    let done = false;\n    let checkpoint: any = undefined;\n    while (!done) {\n        const result = await getChangedDocumentsSince<RxStateDocument, any>(\n            collection.storageInstance,\n            1000,\n            checkpoint\n        );\n        checkpoint = result.checkpoint;\n        const documents = result.documents;\n        if (documents.length === 0) {\n            done = true;\n        } else {\n            for (let index = 0; index < documents.length; index++) {\n                const document = documents[index];\n                mergeOperationsIntoState(rxState._state, document.ops);\n            }\n        }\n    }\n    rxState._initDone = true;\n\n    const proxy = new Proxy(\n        rxState as any,\n        {\n            get(target, property: any) {\n                if (typeof property !== 'string') {\n                    return target[property];\n                }\n                if ((rxState as any)[property]) {\n                    const ret = (rxState as any)[property];\n                    if (typeof ret === 'function') {\n                        return ret.bind(rxState);\n                    } else {\n                        return ret;\n                    }\n                }\n                const lastChar = property.charAt(property.length - 1);\n                if (property.endsWith('$$')) {\n                    const key = property.slice(0, -2);\n                    return rxState.get$$(key as any);\n                } else if (lastChar === '$') {\n                    const key = property.slice(0, -1);\n                    return rxState.get$(key as any);\n                } else {\n                    return rxState.get(property as any);\n                }\n            },\n            set(target, newValue, receiver) {\n                throw new Error('Do not write to RxState');\n            }\n        }\n    );\n\n    runPluginHooks('createRxState', {\n        collection,\n        state: proxy\n    });\n\n    return proxy;\n}\n\n\nexport function mergeOperationsIntoState<T>(\n    state: T,\n    operations: RxStateOperation[]\n) {\n    for (let index = 0; index < operations.length; index++) {\n        const operation = operations[index];\n        setProperty(state, operation.k, clone(operation.v));\n    }\n}\n"],"mappings":"AAAA,SAEIA,OAAO,EACPC,oBAAoB,EACpBC,GAAG,EACHC,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,GAAG,QACA,MAAM;AACb,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,wBAAwB,QAAQ,4BAA4B;AASrE,SACIC,0BAA0B,EAC1BC,WAAW,EACXC,WAAW,EACXC,oBAAoB,EACpBC,aAAa,EACbC,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,kBAAkB,QACf,mBAAmB;AAC1B,SACIC,0BAA0B,EAC1BC,iBAAiB,EACjBC,aAAa,QACV,cAAc;AAMrB,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,cAAc,QAAQ,gBAAgB;AAG/C,IAAIC,OAAO,GAAG,CAAC;AAGf,IAAMC,eAAe,GAAG,IAAIC,OAAO,CAAW,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,WAAW;EACpB;;EAcA,SAAAA,YACoBC,MAAc,EACdC,UAAyC,EAC3D;IAAA,KAhBKC,GAAG,GAAWN,OAAO,EAAE;IAAA,KACvBO,MAAM,GAAY,CAAC,CAAC;IAAA,KAGpBC,aAAa,GAGd,EAAE;IAAA,KACDC,WAAW,GAAGpB,oBAAoB;IAAA,KAClCqB,SAAS,GAAG,KAAK;IAAA,KACjBC,WAAW,GAAGnB,WAAW,CAACG,0BAA0B,CAACiB,UAAU,CAACC,GAAG,CAACC,SAAS,CAAC;IAAA,KAC9EC,UAAU,GAAG,IAAItC,OAAO,CAAI,CAAC;IAAA,KAGhB2B,MAAc,GAAdA,MAAc;IAAA,KACdC,UAAyC,GAAzCA,UAAyC;IAEzD,IAAI,CAACA,UAAU,CAACW,OAAO,CAACC,IAAI,CAAC,MAAM,IAAI,CAACR,WAAW,CAAC;IACpD,IAAI,CAACS,YAAY,GAAG,IAAI,CAACb,UAAU,CAACc,OAAO,CAAC;MACxCC,IAAI,EAAE,CACF;QAAEC,EAAE,EAAE;MAAO,CAAC;IAEtB,CAAC,CAAC;IACF;IACA,IAAI,CAACH,YAAY,CAACI,CAAC,CAACC,SAAS,CAAC,CAAC;IAE/B,IAAI,CAACD,CAAC,GAAG1C,KAAK,CACV,IAAI,CAACmC,UAAU,EACf,IAAI,CAACV,UAAU,CAACmB,WAAW,CAACC,IAAI,CAC5B1C,GAAG,CAAC2C,SAAS,IAAI;MACb,IAAI,CAAC,IAAI,CAAChB,SAAS,EAAE;QACjB;MACJ;MACA,IAAMiB,MAAM,GAAGD,SAAS,CAACC,MAAM;MAC/B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;QAChD,IAAME,KAAK,GAAGH,MAAM,CAACC,KAAK,CAAC;QAC3B,IACIE,KAAK,CAACC,SAAS,KAAK,QAAQ,IAC5BD,KAAK,CAACE,YAAY,CAACnB,GAAG,KAAK,IAAI,CAACF,WAAW,EAC7C;UACE,IAAI,CAACsB,wBAAwB,CAACH,KAAK,CAACE,YAAY,CAACE,GAAG,CAAC;QACzD;MACJ;IACJ,CAAC,CACL,CACJ,CAAC,CAACT,IAAI,CACF5C,WAAW,CAACK,0BAA0B,CAAC,EACvCP,GAAG,CAAC,MAAM,IAAI,CAAC4B,MAAM,CACzB,CAAC;IACD;IACA,IAAI,CAACe,CAAC,CAACC,SAAS,CAAC,CAAC;EACtB;EAAC,IAAAY,MAAA,GAAAhC,WAAA,CAAAiC,SAAA;EAAAD,MAAA,CAEKE,GAAG,GAAT,eAAMA,GAAGA,CACLC,IAAmB,EACnBC,QAAyB,EAC3B;IACE,IAAI,CAAC/B,aAAa,CAACS,IAAI,CAAC;MACpBqB,IAAI;MACJC;IACJ,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,aAAa,CAAC,CAAC;EAC/B;;EAEA;AACJ;AACA;AACA;AACA;AACA,KALI;EAAAL,MAAA,CAMAK,aAAa,GAAb,SAAAA,aAAaA,CAAA,EAAG;IACZ,IAAI,CAAC/B,WAAW,GAAG,IAAI,CAACA,WAAW,CAACgC,IAAI,CAAC,YAAY;MACjD,IAAI,IAAI,CAACjC,aAAa,CAACqB,MAAM,KAAK,CAAC,EAAE;QACjC;MACJ;MACA,IAAIa,SAAoC,GAAG,EAAE;MAC7C,IAAIC,IAAI,GAAG,KAAK;MAChB,OAAO,CAACA,IAAI,EAAE;QACV,IAAMC,SAAS,GAAG,MAAM,IAAI,CAAC1B,YAAY,CAAC2B,IAAI,CAAC,CAAC;QAChDvD,aAAa,CAACoD,SAAS,EAAE,IAAI,CAAClC,aAAa,CAAC;QAC5C,IAAI,CAACA,aAAa,GAAG,EAAE;QACvB,IAAMsC,MAAM,GAAGjD,aAAa,CAAC+C,SAAS,GAAGA,SAAS,CAACvB,EAAE,GAAG0B,SAAS,CAAC;QAClE,IAAI;UACA;AACpB;AACA;AACA;AACA;UACoB,IAAIC,QAAQ,GAAGzD,KAAK,CAAC,IAAI,CAACgB,MAAM,CAAC;UACjC,IAAM2B,GAAuB,GAAG,EAAE;UAClC,KAAK,IAAIN,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGc,SAAS,CAACb,MAAM,EAAED,KAAK,EAAE,EAAE;YACnD,IAAMqB,QAAQ,GAAGP,SAAS,CAACd,KAAK,CAAC;YACjC,IAAMsB,KAAK,GAAG/D,WAAW,CAAC6D,QAAQ,EAAEC,QAAQ,CAACX,IAAI,CAAC;YAClD,IAAMa,QAAQ,GAAGF,QAAQ,CAACV,QAAQ,CAACW,KAAK,CAAC;YACzC;AACxB;AACA;AACA;AACA;YACwB,IAAID,QAAQ,CAACX,IAAI,KAAK,EAAE,EAAE;cACtBU,QAAQ,GAAGzD,KAAK,CAAC4D,QAAQ,CAAC;YAC9B,CAAC,MAAM;cACH/D,WAAW,CAAC4D,QAAQ,EAAEC,QAAQ,CAACX,IAAI,EAAE/C,KAAK,CAAC4D,QAAQ,CAAC,CAAC;YACzD;YACAjB,GAAG,CAACjB,IAAI,CAAC;cACLmC,CAAC,EAAEH,QAAQ,CAACX,IAAI;cAChB;AAC5B;AACA;AACA;AACA;cAC4Be,CAAC,EAAE9D,KAAK,CAAC4D,QAAQ;YACrB,CAAC,CAAC;UACN;UACA,MAAM,IAAI,CAAC9C,UAAU,CAACiD,MAAM,CAAC;YACzBjC,EAAE,EAAEyB,MAAM;YACVjC,GAAG,EAAE,IAAI,CAACF,WAAW;YACrBuB;UACJ,CAAC,CAAC;UACF,IAAI,CAAC3B,MAAM,GAAGyC,QAAQ;UACtB,IAAI,CAACjC,UAAU,CAACwC,IAAI,CAAC,IAAI,CAAChD,MAAM,CAAC;UACjCoC,IAAI,GAAG,IAAI;QACf,CAAC,CAAC,OAAOa,GAAG,EAAE;UACV,IAAKA,GAAG,CAAaC,IAAI,KAAK,UAAU,EAAE;YACtC,MAAMD,GAAG;UACb;QACJ;MACJ;IACJ,CAAC,CAAC,CAACE,KAAK,CAACC,KAAK,IAAI;MACd,MAAM7D,UAAU,CAAC,KAAK,EAAE;QACpB8D,IAAI,EAAE,2BAA2B;QACjCD;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAClD,WAAW;EAC3B,CAAC;EAAA0B,MAAA,CAEDF,wBAAwB,GAAxB,SAAAA,wBAAwBA,CACpB4B,UAA8B,EAChC;IACE,IAAIC,KAAK,GAAGvE,KAAK,CAAC,IAAI,CAACgB,MAAM,CAAC;IAC9B,KAAK,IAAIqB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGiC,UAAU,CAAChC,MAAM,EAAED,KAAK,EAAE,EAAE;MACpD,IAAMG,SAAS,GAAG8B,UAAU,CAACjC,KAAK,CAAC;MACnC,IAAIG,SAAS,CAACqB,CAAC,KAAK,EAAE,EAAE;QACpBU,KAAK,GAAGvE,KAAK,CAACwC,SAAS,CAACsB,CAAC,CAAC;MAC9B,CAAC,MAAM;QACHjE,WAAW,CAAC0E,KAAK,EAAE/B,SAAS,CAACqB,CAAC,EAAE7D,KAAK,CAACwC,SAAS,CAACsB,CAAC,CAAC,CAAC;MACvD;IACJ;IACA,IAAI,CAAC9C,MAAM,GAAGuD,KAAK;EACvB,CAAC;EAAA3B,MAAA,CACD4B,GAAG,GAAH,SAAAA,GAAGA,CAACzB,IAAe,EAAE;IACjB,IAAI0B,GAAG;IACP,IAAI,CAAC1B,IAAI,EAAE;MACP0B,GAAG,GAAG,IAAI,CAACzD,MAAM;IACrB,CAAC,MAAM;MACHyD,GAAG,GAAG7E,WAAW,CAAC,IAAI,CAACoB,MAAM,EAAE+B,IAAI,CAAC;IACxC;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAItD,YAAY,CAACiF,SAAS,CAAC,CAAC,IAAIrE,iBAAiB,CAACoE,GAAG,CAAC,EAAE;MACpD,IAAME,MAAM,GAAGxE,kBAAkB,CAC7BO,eAAe,EACf+D,GAAG,EACH,MAAMhF,YAAY,CAACmF,qBAAqB,CAAC5E,KAAK,CAACyE,GAAG,CAAC,CACvD,CAAC;MACD,OAAOE,MAAM;IACjB;IAEA,OAAOF,GAAG;EACd,CAAC;EAAA7B,MAAA,CACDiC,IAAI,GAAJ,SAAAA,IAAIA,CAAC9B,IAAe,EAAmB;IACnC,OAAO,IAAI,CAAChB,CAAC,CAACG,IAAI,CACd9C,GAAG,CAAC,MAAM,IAAI,CAACoF,GAAG,CAACzB,IAAI,CAAC,CAAC,EACzBxD,SAAS,CAAC,IAAI,CAACiF,GAAG,CAACzB,IAAI,CAAC,CAAC,EACzB5D,oBAAoB,CAACe,SAAS,CAAC,EAC/BZ,WAAW,CAACK,0BAA0B,CAC1C,CAAC;EACL,CAAC;EAAAiD,MAAA,CACDkC,KAAK,GAAL,SAAAA,KAAKA,CAAC/B,IAAe,EAAc;IAC/B,IAAMgC,GAAG,GAAG,IAAI,CAACF,IAAI,CAAC9B,IAAI,CAAC;IAC3B,IAAMiC,UAAU,GAAG,IAAI,CAAClE,UAAU,CAACmE,QAAQ,CAACC,oBAAoB,CAAC,CAAC;IAClE,OAAOF,UAAU,CAACG,cAAc,CAC5BJ,GAAG,EACH,IAAI,CAACP,GAAG,CAACzB,IAAI,CAAC,EACd,IAAI,CAACjC,UAAU,CAACmE,QACpB,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA,KAJI;EAAArC,MAAA,CAKMwC,QAAQ,GAAd,eAAMA,QAAQA,CAAA,EAAG;IACb,IAAMC,UAAU,GAAG,MAAM,IAAI,CAACvE,UAAU,CAACc,OAAO,CAAC;MAC7CC,IAAI,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAM,CAAC;IACxB,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC;IACT,IAAMgC,SAAS,GAAG,MAAM,IAAI,CAAC3D,YAAY,CAAC2B,IAAI,CAAC,CAAC;IAEhD,IAAI,CAAC+B,UAAU,IAAI,CAACC,SAAS,EAAE;MAC3B;IACJ;IAEA,IAAMC,OAAO,GAAGC,QAAQ,CAACH,UAAU,CAACvD,EAAE,EAAE,EAAE,CAAC;IAC3C,IAAM2D,MAAM,GAAGD,QAAQ,CAACF,SAAS,CAACxD,EAAE,EAAE,EAAE,CAAC;IACzC,IAAK2D,MAAM,GAAG,CAAC,GAAIF,OAAO,EAAE;MACxB;MACA;IACJ;;IAEA;IACA,MAAM,IAAI,CAACrE,WAAW;IACtB,MAAM,IAAI,CAAC4B,GAAG,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC9B,MAAM,CAAC;;IAErC;IACA,MAAM,IAAI,CAACF,UAAU,CAAC4E,IAAI,CAAC;MACvBC,QAAQ,EAAE;QACN7D,EAAE,EAAE;UACA8D,IAAI,EAAEN,SAAS,CAACxD;QACpB;MACJ;IACJ,CAAC,CAAC,CAAC+D,MAAM,CAAC,CAAC;EACf,CAAC;EAAA,OAAAjF,WAAA;AAAA;AAIL,OAAO,eAAekF,aAAaA,CAC/Bb,QAAoB,EACpBpE,MAAc,EACS;EACvB,IAAMkF,cAAc,GAAG,WAAW,GAAGlF,MAAM;EAC3C,MAAMoE,QAAQ,CAACe,cAAc,CAAC;IAC1B,CAACD,cAAc,GAAG;MACdE,MAAM,EAAE7F;IACZ;EACJ,CAAC,CAAC;EACF,IAAMU,UAAyC,GAAGmE,QAAQ,CAACiB,WAAW,CAACH,cAAc,CAAC;EAEtF,IAAMI,OAAO,GAAG,IAAIvF,WAAW,CAC3BC,MAAM,EACNC,UACJ,CAAC;;EAGD;AACJ;AACA;AACA;AACA;EACI,IAAIsC,IAAI,GAAG,KAAK;EAChB,IAAIgD,UAAe,GAAG5C,SAAS;EAC/B,OAAO,CAACJ,IAAI,EAAE;IACV,IAAMiD,MAAM,GAAG,MAAM3G,wBAAwB,CACzCoB,UAAU,CAACwF,eAAe,EAC1B,IAAI,EACJF,UACJ,CAAC;IACDA,UAAU,GAAGC,MAAM,CAACD,UAAU;IAC9B,IAAMG,SAAS,GAAGF,MAAM,CAACE,SAAS;IAClC,IAAIA,SAAS,CAACjE,MAAM,KAAK,CAAC,EAAE;MACxBc,IAAI,GAAG,IAAI;IACf,CAAC,MAAM;MACH,KAAK,IAAIf,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGkE,SAAS,CAACjE,MAAM,EAAED,KAAK,EAAE,EAAE;QACnD,IAAMmE,QAAQ,GAAGD,SAAS,CAAClE,KAAK,CAAC;QACjCK,wBAAwB,CAACyD,OAAO,CAACnF,MAAM,EAAEwF,QAAQ,CAAC7D,GAAG,CAAC;MAC1D;IACJ;EACJ;EACAwD,OAAO,CAAChF,SAAS,GAAG,IAAI;EAExB,IAAMsF,KAAK,GAAG,IAAIC,KAAK,CACnBP,OAAO,EACP;IACI3B,GAAGA,CAACmC,MAAM,EAAEC,QAAa,EAAE;MACvB,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC9B,OAAOD,MAAM,CAACC,QAAQ,CAAC;MAC3B;MACA,IAAKT,OAAO,CAASS,QAAQ,CAAC,EAAE;QAC5B,IAAMnC,GAAG,GAAI0B,OAAO,CAASS,QAAQ,CAAC;QACtC,IAAI,OAAOnC,GAAG,KAAK,UAAU,EAAE;UAC3B,OAAOA,GAAG,CAACoC,IAAI,CAACV,OAAO,CAAC;QAC5B,CAAC,MAAM;UACH,OAAO1B,GAAG;QACd;MACJ;MACA,IAAMqC,QAAQ,GAAGF,QAAQ,CAACG,MAAM,CAACH,QAAQ,CAACtE,MAAM,GAAG,CAAC,CAAC;MACrD,IAAIsE,QAAQ,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAE;QACzB,IAAMC,GAAG,GAAGL,QAAQ,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,OAAOf,OAAO,CAACrB,KAAK,CAACmC,GAAU,CAAC;MACpC,CAAC,MAAM,IAAIH,QAAQ,KAAK,GAAG,EAAE;QACzB,IAAMG,IAAG,GAAGL,QAAQ,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,OAAOf,OAAO,CAACtB,IAAI,CAACoC,IAAU,CAAC;MACnC,CAAC,MAAM;QACH,OAAOd,OAAO,CAAC3B,GAAG,CAACoC,QAAe,CAAC;MACvC;IACJ,CAAC;IACD9D,GAAGA,CAAC6D,MAAM,EAAE/C,QAAQ,EAAEuD,QAAQ,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC9C;EACJ,CACJ,CAAC;EAED5G,cAAc,CAAC,eAAe,EAAE;IAC5BM,UAAU;IACVyD,KAAK,EAAEkC;EACX,CAAC,CAAC;EAEF,OAAOA,KAAK;AAChB;AAGA,OAAO,SAAS/D,wBAAwBA,CACpC6B,KAAQ,EACRD,UAA8B,EAChC;EACE,KAAK,IAAIjC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGiC,UAAU,CAAChC,MAAM,EAAED,KAAK,EAAE,EAAE;IACpD,IAAMG,SAAS,GAAG8B,UAAU,CAACjC,KAAK,CAAC;IACnCxC,WAAW,CAAC0E,KAAK,EAAE/B,SAAS,CAACqB,CAAC,EAAE7D,KAAK,CAACwC,SAAS,CAACsB,CAAC,CAAC,CAAC;EACvD;AACJ","ignoreList":[]}