{"version":3,"file":"mongodb-helper.js","names":["newRxError","errorToPlainJson","flatClone","toArray","startChangeStream","mongoCollection","resumeToken","errorSubject","changeStream","watch","resumeAfter","on","err","emitError","errors","map","er","next","mongodbDocToRxDB","primaryPath","doc","_id","document","useDoc","_deleted","rxdbDocToMongo","ret","_meta","_attachments"],"sources":["../../../../src/plugins/replication-mongodb/mongodb-helper.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { RxError, RxTypeError, newRxError } from '../../rx-error.ts';\nimport {\n    errorToPlainJson,\n    flatClone,\n    toArray\n} from '../utils/index.ts';\nimport type {\n    MongoDBChangeStreamResumeToken\n} from './mongodb-types';\nimport {\n    Collection as MongoCollection,\n    ChangeStream,\n    WithId\n} from 'mongodb';\nimport type { RxDocumentData, WithDeleted } from '../../types/rx-storage';\n\nexport async function startChangeStream(\n    mongoCollection: MongoCollection<any>,\n    resumeToken?: MongoDBChangeStreamResumeToken,\n    errorSubject?: Subject<RxError | RxTypeError>\n): Promise<ChangeStream> {\n    const changeStream = mongoCollection.watch([], resumeToken ? { resumeAfter: resumeToken } : {\n\n    });\n\n    if (errorSubject) {\n        changeStream.on('error', (err: any) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: toArray(err).map(er => errorToPlainJson(er))\n            });\n            errorSubject.next(emitError);\n        });\n    }\n    return changeStream;\n}\n\n\nexport function mongodbDocToRxDB<DocType>(primaryPath: string, doc: WithId<DocType>): WithDeleted<DocType> {\n    if (primaryPath === '_id' && typeof doc._id !== 'string') {\n        throw newRxError('MG1', {\n            document: doc\n        });\n    }\n\n    const useDoc: any = flatClone(doc);\n    useDoc._deleted = false;\n\n    if (primaryPath === '_id') {\n        return useDoc;\n    } else {\n        delete useDoc._id;\n        return useDoc;\n    }\n}\n\n\n/**\n * MongoDB operations like mongoCollection.updateOne() will mutate the input!\n * So we have to flat-clone first here.\n * Also we do not want to store RxDB-specific metadata in the mongodb database.\n */\nexport function rxdbDocToMongo<DocType>(doc: RxDocumentData<DocType>): DocType {\n    const ret: any = flatClone(doc);\n    delete ret._deleted;\n    delete ret._meta;\n    delete ret._attachments;\n    return ret;\n}\n"],"mappings":"AACA,SAA+BA,UAAU,QAAQ,mBAAmB;AACpE,SACIC,gBAAgB,EAChBC,SAAS,EACTC,OAAO,QACJ,mBAAmB;AAW1B,OAAO,eAAeC,iBAAiBA,CACnCC,eAAqC,EACrCC,WAA4C,EAC5CC,YAA6C,EACxB;EACrB,IAAMC,YAAY,GAAGH,eAAe,CAACI,KAAK,CAAC,EAAE,EAAEH,WAAW,GAAG;IAAEI,WAAW,EAAEJ;EAAY,CAAC,GAAG,CAE5F,CAAC,CAAC;EAEF,IAAIC,YAAY,EAAE;IACdC,YAAY,CAACG,EAAE,CAAC,OAAO,EAAGC,GAAQ,IAAK;MACnC,IAAMC,SAAS,GAAGb,UAAU,CAAC,WAAW,EAAE;QACtCc,MAAM,EAAEX,OAAO,CAACS,GAAG,CAAC,CAACG,GAAG,CAACC,EAAE,IAAIf,gBAAgB,CAACe,EAAE,CAAC;MACvD,CAAC,CAAC;MACFT,YAAY,CAACU,IAAI,CAACJ,SAAS,CAAC;IAChC,CAAC,CAAC;EACN;EACA,OAAOL,YAAY;AACvB;AAGA,OAAO,SAASU,gBAAgBA,CAAUC,WAAmB,EAAEC,GAAoB,EAAwB;EACvG,IAAID,WAAW,KAAK,KAAK,IAAI,OAAOC,GAAG,CAACC,GAAG,KAAK,QAAQ,EAAE;IACtD,MAAMrB,UAAU,CAAC,KAAK,EAAE;MACpBsB,QAAQ,EAAEF;IACd,CAAC,CAAC;EACN;EAEA,IAAMG,MAAW,GAAGrB,SAAS,CAACkB,GAAG,CAAC;EAClCG,MAAM,CAACC,QAAQ,GAAG,KAAK;EAEvB,IAAIL,WAAW,KAAK,KAAK,EAAE;IACvB,OAAOI,MAAM;EACjB,CAAC,MAAM;IACH,OAAOA,MAAM,CAACF,GAAG;IACjB,OAAOE,MAAM;EACjB;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAAUL,GAA4B,EAAW;EAC3E,IAAMM,GAAQ,GAAGxB,SAAS,CAACkB,GAAG,CAAC;EAC/B,OAAOM,GAAG,CAACF,QAAQ;EACnB,OAAOE,GAAG,CAACC,KAAK;EAChB,OAAOD,GAAG,CAACE,YAAY;EACvB,OAAOF,GAAG;AACd","ignoreList":[]}