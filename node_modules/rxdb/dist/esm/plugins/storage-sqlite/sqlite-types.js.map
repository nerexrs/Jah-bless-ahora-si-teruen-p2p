{"version":3,"file":"sqlite-types.js","names":[],"sources":["../../../../src/plugins/storage-sqlite/sqlite-types.ts"],"sourcesContent":["import type {\n    MangoQuery,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../index.ts';\n\n/**\n * Adding '@types/sqlite3' to the dependencies\n * causes many errors on npm install,\n * even if the users uses another SQLite implementation.\n * Therefore we just use the any type instead the one imported from 'sqlite3';\n */\nexport type Sqlite3Type = any;\nexport type SQLiteDatabaseClass = any;\n\n\nexport type SQLResultRow = {\n    id: string;\n    /**\n     * Because we store the document fields as json,\n     * just return a string here.\n     */\n    data: string;\n} | [string, string, number, number, string];\n\nexport type SQLiteBasics<SQLiteDatabaseType> = {\n    debugId?: string;\n\n    /**\n     * Opens a new database connection\n     */\n    open: (name: string) => Promise<SQLiteDatabaseType>;\n    /**\n     * Returns the query result rows\n     */\n    all(\n        db: SQLiteDatabaseType,\n        queryWithParams: SQLiteQueryWithParams\n    ): Promise<SQLResultRow[]>;\n    /**\n     * Run a query. Return nothing.\n     */\n    run(\n        db: SQLiteDatabaseType,\n        queryWithParams: SQLiteQueryWithParams\n    ): Promise<void>;\n    /**\n     * Sets a pragma like the WAL mode or other flags.\n     * This cannot be done in run() or all() because\n     * it does not return rows on some SQLite libraries\n     * which would throw an error.\n     * @link https://www.sqlite.org/pragma.html\n     */\n    setPragma(\n        db: SQLiteDatabaseType,\n        key: string,\n        value: string\n    ): Promise<void>;\n    // closes the database connection\n    close(db: SQLiteDatabaseType): Promise<void>;\n\n    /**\n     * [default=WAL2]\n     * If empty string is given, the journalMode will be left untouched.\n     * For example android has WAL as default, so we do not want to touch that setting.\n     */\n    journalMode: 'WAL' | 'WAL2' | 'DELETE' | 'TRUNCATE' | 'PERSIST' | 'MEMORY' | 'OFF' | '';\n}\nexport type SQLiteStorageSettings = {\n    sqliteBasics: SQLiteBasics<any>;\n    // [default=false]\n    storeAttachmentsAsBase64String?: boolean;\n\n    databaseNamePrefix?: string;\n\n    /**\n     * Can be used to modify the prepared query before\n     * sending it to SQLite when the storageInstance.query()\n     * is run.\n     * For example you could use it to replace a regex with\n     * %LIKE% expressions.\n     */\n    queryModifier?: RxStorageSQLiteQueryModifier<any>;\n\n    /**\n     * If you have problems, you can pass a log function here\n     * to debug stuff.\n     * It is recommended to use console.log.bind(console)\n     */\n    log?: typeof console.log;\n}\n\nexport type RxStorageSQLiteQueryModifier<RxDocType> = (\n    queryWithParams: SQLiteQueryWithParams,\n    preparedQuery: SQLitePreparedQuery<RxDocType>\n) => SQLiteQueryWithParams;\nexport type SQLiteInstanceCreationOptions = {};\nexport type SQLiteInternals = {\n    databasePromise: Promise<SQLiteDatabaseClass>;\n};\nexport type SQLitePreparedQuery<RxDocType> = {\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>;\n    mangoQuery: MangoQuery<RxDocType>;\n    /**\n     * Contains the sql query,\n     * But only from the where clause.\n     * This ensures we can reuse the prepared query\n     * no mather what the name of the table is.\n     * Looks like 'WHERE .... SORT BY ...'.\n     */\n    sqlQuery: SQLiteQueryWithParams;\n\n    /**\n     * The same query but without the ORDER BY part.\n     * Used in count-queries for better performance.\n     */\n    queryWithoutSort: string;\n\n\n    /**\n     * If the query cannot be transformed to SQL,\n     * because it contains non-SQLite-native operators\n     * like $regex, we have use a normal query matching.\n     */\n    nonImplementedOperator?: string;\n}\n\nexport type SQLiteQueryWithParams = {\n    query: string;\n    /**\n     * Some SQLite version allow to use named params like $docId\n     * and then putting an object in here.\n     * But because not all environments support that,\n     * we have to use plain array params that use the '?' placeholder in the query string.\n     */\n    params: (string | number | boolean)[];\n\n    /**\n     * Context must be set, will be used during debugging and error logs\n     * to better show what is going wrong.\n     */\n    context: {\n        method: string;\n        data: any;\n    };\n}\n\nexport type SQLiteChangesCheckpoint = {\n    id: string;\n    lwt: number;\n};\n"],"mappings":"","ignoreList":[]}