{"version":3,"file":"sqlite-storage-instance.js","names":["getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","ensureNotFalsy","addRxStorageMultiInstanceSupport","promiseWait","getQueryMatcher","BehaviorSubject","Subject","filter","firstValueFrom","closeDatabaseConnection","ensureParamsCountIsCorrect","getDatabaseConnection","getSQLiteUpdateSQL","RX_STORAGE_NAME_SQLITE","sqliteTransaction","getDataFromResultRow","getSQLiteInsertSQL","TX_QUEUE_BY_DATABASE","getSortComparator","newRxError","instanceId","RxStorageInstanceSQLite","storage","databaseName","collectionName","schema","internals","options","settings","tableName","devMode","changes$","openWriteCount$","opCount","sqliteBasics","primaryPath","primaryKey","_proto","prototype","run","db","queryWithParams","all","bulkWrite","documentWrites","context","next","getValue","database","databasePromise","ret","error","writePromises","categorized","closed","Error","result","query","params","method","data","docsInDb","Map","forEach","docSQLResult","doc","JSON","parse","id","set","errors","length","bulkInsertDocs","row","insertQuery","document","push","bulkUpdateDocs","updateQuery","Promise","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","originalPreparedQuery","skip","limit","Infinity","skipPlusLimit","queryMatcher","subResult","docData","sortComparator","sort","slice","documents","count","results","mode","findDocumentsById","ids","withDeleted","i","resultRow","includes","_deleted","changeStream","asObservable","cleanup","minimumDeletedTime","minTimestamp","Date","getTime","getAttachmentData","_documentId","_attachmentId","remove","promises","close","queue","get","pipe","v","resolve","catch","complete","createSQLiteTrialStorageInstance","version","attachments","useDatabaseName","databaseNamePrefix","then","tableQuery","indexCreation","instance"],"sources":["../../../../src/plugins/storage-sqlite/sqlite-storage-instance.ts"],"sourcesContent":["import {\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    getPrimaryFieldOfPrimaryKey,\n    EventBulk,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    categorizeBulkWriteRows,\n    ensureNotFalsy,\n    StringKeys,\n    addRxStorageMultiInstanceSupport,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult,\n    promiseWait,\n    getQueryMatcher,\n    PreparedQuery\n} from '../../index.ts';\nimport { BehaviorSubject, Observable, Subject, filter, firstValueFrom } from 'rxjs';\nimport type { RxStorageSQLiteTrial } from './index.ts';\nimport {\n    closeDatabaseConnection,\n    ensureParamsCountIsCorrect,\n    getDatabaseConnection,\n    getSQLiteUpdateSQL,\n    RX_STORAGE_NAME_SQLITE,\n    sqliteTransaction,\n    getDataFromResultRow,\n    getSQLiteInsertSQL,\n    TX_QUEUE_BY_DATABASE\n} from './sqlite-helpers.ts';\nimport type {\n    SQLiteBasics,\n    SQLiteInstanceCreationOptions,\n    SQLiteInternals,\n    SQLiteQueryWithParams,\n    SQLiteStorageSettings\n} from './sqlite-types.ts';\nimport { getSortComparator } from '../../rx-query-helper.ts';\nimport { newRxError } from '../../rx-error.ts';\n\nlet instanceId = 0;\nexport class RxStorageInstanceSQLite<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    SQLiteInternals,\n    SQLiteInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocType>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed?: Promise<void>;\n\n    public sqliteBasics: SQLiteBasics<any>;\n\n    public readonly openWriteCount$ = new BehaviorSubject(0);\n\n\n    private opCount = 0;\n\n    constructor(\n        public readonly storage: RxStorageSQLiteTrial,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: SQLiteInternals,\n        public readonly options: Readonly<SQLiteInstanceCreationOptions>,\n        public readonly settings: SQLiteStorageSettings,\n        public readonly tableName: string,\n        public readonly devMode: boolean\n    ) {\n        this.sqliteBasics = storage.settings.sqliteBasics;\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey) as any;\n    }\n\n\n    run(\n        db: any,\n        queryWithParams: SQLiteQueryWithParams\n    ) {\n        if (this.devMode) {\n            ensureParamsCountIsCorrect(queryWithParams);\n        }\n        return this.sqliteBasics.run(db, queryWithParams);\n    }\n    all(\n        db: any,\n        queryWithParams: SQLiteQueryWithParams\n    ) {\n        if (this.devMode) {\n            ensureParamsCountIsCorrect(queryWithParams);\n        }\n\n        this.opCount = this.opCount + 1;\n        if (this.opCount > 110) {\n            throw newRxError('SQL3');\n        }\n\n        return this.sqliteBasics.all(db, queryWithParams);\n    }\n\n    /**\n     * @link https://medium.com/@JasonWyatt/squeezing-performance-from-sqlite-insertions-971aff98eef2\n     */\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        this.openWriteCount$.next(this.openWriteCount$.getValue() + 1);\n        const database = await this.internals.databasePromise;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            error: []\n        };\n        const writePromises: Promise<any>[] = [];\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> = {} as any;\n\n        await sqliteTransaction(\n            database,\n            this.sqliteBasics,\n            async () => {\n                if (this.closed) {\n                    this.openWriteCount$.next(this.openWriteCount$.getValue() - 1);\n                    throw new Error('SQLite.bulkWrite(' + context + ') already closed ' + this.tableName + ' context: ' + context);\n                }\n                const result = await this.all(\n                    database,\n                    {\n                        query: `SELECT data FROM \"${this.tableName}\"`,\n                        params: [],\n                        context: {\n                            method: 'bulkWrite',\n                            data: documentWrites\n                        }\n                    }\n                );\n\n                const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n                result.forEach(docSQLResult => {\n                    const doc = JSON.parse(getDataFromResultRow(docSQLResult));\n                    const id = doc[this.primaryPath];\n                    docsInDb.set(id, doc);\n                });\n                categorized = categorizeBulkWriteRows(\n                    this,\n                    this.primaryPath,\n                    docsInDb,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                if ((result.length + categorized.bulkInsertDocs.length) > 300) {\n                    throw newRxError('SQL2');\n                }\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    const insertQuery = getSQLiteInsertSQL(\n                        this.tableName,\n                        this.primaryPath as any,\n                        row.document\n                    );\n                    writePromises.push(\n                        this.all(\n                            database,\n                            {\n                                query: insertQuery.query,\n                                params: insertQuery.params,\n                                context: {\n                                    method: 'bulkWrite',\n                                    data: categorized\n                                }\n                            }\n                        )\n                    );\n                });\n\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const updateQuery = getSQLiteUpdateSQL<RxDocType>(\n                        this.tableName,\n                        this.primaryPath,\n                        row\n                    );\n                    writePromises.push(\n                        this.run(\n                            database,\n                            updateQuery\n                        )\n                    );\n                });\n\n                await Promise.all(writePromises);\n\n                // close transaction\n                if (this.closed) {\n                    this.openWriteCount$.next(this.openWriteCount$.getValue() - 1);\n                    return 'ROLLBACK';\n                } else {\n                    this.openWriteCount$.next(this.openWriteCount$.getValue() - 1);\n                    return 'COMMIT';\n                }\n            },\n            {\n                databaseName: this.databaseName,\n                collectionName: this.collectionName\n            }\n        );\n\n        if (categorized && categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n\n\n    async query(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n\n        const database = await this.internals.databasePromise;\n\n\n\n        let result: RxDocumentData<RxDocType>[] = [];\n        const query = originalPreparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n        const queryMatcher = getQueryMatcher(\n            this.schema,\n            query as any\n        );\n        const subResult = await this.all(\n            database,\n            {\n                query: 'SELECT data FROM \"' + this.tableName + '\"',\n                params: [],\n                context: {\n                    method: 'query',\n                    data: originalPreparedQuery\n                }\n            }\n        );\n        subResult.forEach(row => {\n            const docData = JSON.parse(getDataFromResultRow(row));\n            if (queryMatcher(docData)) {\n                result.push(docData);\n            }\n        });\n        const sortComparator = getSortComparator(this.schema, query as any);\n        result = result.sort(sortComparator);\n        result = result.slice(skip, skipPlusLimit);\n        return {\n            documents: result\n        };\n    }\n    async count(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const results = await this.query(originalPreparedQuery);\n        return {\n            count: results.documents.length,\n            mode: 'fast'\n        };\n    }\n\n\n    async findDocumentsById(\n        ids: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        const database = await this.internals.databasePromise;\n\n        if (this.closed) {\n            throw new Error('SQLite.findDocumentsById() already closed ' + this.tableName + ' context: ' + context);\n        }\n\n        const result = await this.all(\n            database,\n            {\n                query: `SELECT data FROM \"${this.tableName}\"`,\n                params: [],\n                context: {\n                    method: 'findDocumentsById',\n                    data: ids\n                }\n            }\n        );\n        const ret: RxDocumentData<RxDocType>[] = [];\n        for (let i = 0; i < result.length; ++i) {\n            const resultRow = result[i];\n            const doc: RxDocumentData<RxDocType> = JSON.parse(getDataFromResultRow(resultRow));\n            if (\n                ids.includes((doc as any)[this.primaryPath]) &&\n                (\n                    withDeleted || !doc._deleted\n                )\n            ) {\n                ret.push(doc);\n            }\n        }\n        return ret;\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        await promiseWait(0);\n        await promiseWait(0);\n        const database = await this.internals.databasePromise;\n\n        /**\n         * Purge deleted documents\n         */\n        const minTimestamp = new Date().getTime() - minimumDeletedTime;\n        await this.all(\n            database,\n            {\n                query: `\n                    DELETE FROM\n                        \"${this.tableName}\"\n                    WHERE\n                        deleted = 1\n                        AND\n                        lastWriteTime < ?\n                `,\n                params: [\n                    minTimestamp\n                ],\n                context: {\n                    method: 'cleanup',\n                    data: minimumDeletedTime\n                }\n            }\n        );\n        return true;\n    }\n\n    async getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw newRxError('SQL1');\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('closed already');\n        }\n        const database = await this.internals.databasePromise;\n        const promises = [\n            this.run(\n                database,\n                {\n                    query: `DROP TABLE IF EXISTS \"${this.tableName}\"`,\n                    params: [],\n                    context: {\n                        method: 'remove',\n                        data: this.tableName\n                    }\n                }\n            )\n        ];\n        await Promise.all(promises);\n        return this.close();\n    }\n\n    async close(): Promise<void> {\n        const queue = TX_QUEUE_BY_DATABASE.get(await this.internals.databasePromise);\n        if (queue) {\n            await queue;\n        }\n\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            await firstValueFrom(this.openWriteCount$.pipe(filter(v => v === 0)));\n            const database = await this.internals.databasePromise;\n\n            /**\n             * First get a transaction\n             * to ensure currently running operations\n             * are finished\n             */\n            await sqliteTransaction(\n                database,\n                this.sqliteBasics,\n                () => {\n                    return Promise.resolve('COMMIT');\n                }\n            ).catch(() => { });\n            this.changes$.complete();\n            await closeDatabaseConnection(\n                this.databaseName,\n                this.storage.settings.sqliteBasics\n            );\n        })();\n        return this.closed;\n\n    }\n}\n\nexport async function createSQLiteTrialStorageInstance<RxDocType>(\n    storage: RxStorageSQLiteTrial,\n    params: RxStorageInstanceCreationParams<RxDocType, SQLiteInstanceCreationOptions>,\n    settings: SQLiteStorageSettings\n): Promise<RxStorageInstanceSQLite<RxDocType>> {\n    const sqliteBasics = settings.sqliteBasics;\n    const tableName = params.collectionName + '-' + params.schema.version;\n\n\n    if (params.schema.attachments) {\n        throw newRxError('SQL1');\n    }\n\n    const internals: Partial<SQLiteInternals> = {};\n    const useDatabaseName = (settings.databaseNamePrefix ? settings.databaseNamePrefix : '') + '_trial_' + params.databaseName;\n    internals.databasePromise = getDatabaseConnection(\n        storage.settings.sqliteBasics,\n        useDatabaseName\n    ).then(async (database) => {\n        await sqliteTransaction(\n            database,\n            sqliteBasics,\n            async () => {\n                const tableQuery = `\n                CREATE TABLE IF NOT EXISTS \"${tableName}\"(\n                    id TEXT NOT NULL PRIMARY KEY UNIQUE,\n                    revision TEXT,\n                    deleted BOOLEAN NOT NULL CHECK (deleted IN (0, 1)),\n                    lastWriteTime INTEGER NOT NULL,\n                    data json\n                );\n                `;\n                await sqliteBasics.run(\n                    database,\n                    {\n                        query: tableQuery,\n                        params: [],\n                        context: {\n                            method: 'createSQLiteStorageInstance create tables',\n                            data: params.databaseName\n                        }\n                    }\n                );\n                return 'COMMIT';\n            },\n            {\n                indexCreation: false,\n                databaseName: params.databaseName,\n                collectionName: params.collectionName\n            }\n        );\n        return database;\n    });\n\n    const instance = new RxStorageInstanceSQLite(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals as any,\n        params.options,\n        settings,\n        tableName,\n        params.devMode\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_SQLITE,\n        params,\n        instance\n    );\n\n    return instance;\n}\n"],"mappings":"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","ignoreList":[]}