{"version":3,"file":"rx-database.js","names":["_customIdleQueue","require","_obliviousSet","_index","_rxError","_rxSchema","_hooks","_rxjs","_operators","_rxCollection","_rxStorageHelper","_rxDatabaseInternalStore","_rxCollectionHelper","_overwritable","_rxChangeEvent","USED_DATABASE_NAMES","Set","DATABASE_UNCLOSED_INSTANCE_PROMISE_MAP","Map","DB_COUNT","RxDatabaseBase","exports","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","reactivity","onClosed","idleQueue","IdleQueue","rxdbVersion","RXDB_VERSION","storageInstances","_subs","startupErrors","onClose","closed","collections","states","eventBulks$","Subject","closePromise","observable$","pipe","mergeMap","changeEventBulk","rxChangeEventBulkToRxChangeEvents","storageToken","PROMISE_RESOLVE_FALSE","storageTokenDocument","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","INTERNAL_STORE_SCHEMA","ensureStorageTokenDocumentExists","catch","err","push","then","doc","data","_proto","prototype","getReactivityFactory","newRxError","database","$emit","has","id","add","next","removeCollectionDoc","schema","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","writeDoc","flatCloneDocWithMeta","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Promise","all","Object","entries","map","args","collectionName","rxJsonSchema","createRxSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","useArgs","assign","hookData","flatClone","runPluginHooks","conflictHandler","putDocsResult","ensureNoStartupErrors","error","status","writeError","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","addState","_name","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","close","promise","resolve","createPromiseWithResolvers","resolveClosePromise","result","runAsyncPluginHooks","complete","sub","unsubscribe","col","remove","removeRxDatabase","_createClass2","default","throwIfDatabaseNameUsed","getDatabaseNameKey","link","reject","res","rej","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","INTERNAL_STORAGE_NAME","devMode","overwritable","isDevMode","createRxDatabase","ignoreDuplicate","closeDuplicates","localDocuments","defaultHashSha256","databaseNameKey","databaseNameKeyUnclosedInstancesSet","instancePromiseWithResolvers","closeDuplicatesPromises","Array","from","onInstanceClosed","delete","set","unclosedInstancePromise","instance","randomToken","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","collectionDocs","getAllCollectionDocuments","collectionNames","forEach","removedCollectionNames","removeCollectionStorages","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport { ObliviousSet } from 'oblivious-set';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise,\n    RxState\n} from './types/index.d.ts';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomToken,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashSha256,\n    RXDB_VERSION\n} from './plugins/utils/index.ts';\nimport {\n    newRxError\n} from './rx-error.ts';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema.ts';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks.ts';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection.ts';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport type { RxBackupState } from './plugins/backup/index.ts';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store.ts';\nimport { removeCollectionStorages } from './rx-collection-helper.ts';\nimport { overwritable } from './overwritable.ts';\nimport type { RxMigrationState } from './plugins/migration-schema/index.ts';\nimport type { RxReactivityFactory } from './types/plugins/reactivity.d.ts';\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\n\n/**\n * stores the used database names+storage names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\nconst DATABASE_UNCLOSED_INSTANCE_PROMISE_MAP = new Map<string, Set<Promise<RxDatabase>>>();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    Reactivity = unknown\n> {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n    public readonly rxdbVersion = RXDB_VERSION;\n\n    /**\n     * Contains all known non-closed storage instances\n     * that belong to this database.\n     * Used in plugins and unit tests.\n     */\n    public readonly storageInstances = new Set<WrappedRxStorageInstance<any, Internals, InstanceCreationOptions>>();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\n        public readonly allowSlowCount?: boolean,\n        public readonly reactivity?: RxReactivityFactory<any>,\n        public readonly onClosed?: () => void,\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         *\n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             *\n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public getReactivityFactory(): RxReactivityFactory<Reactivity> {\n        if (!this.reactivity) {\n            throw newRxError('DB14', { database: this.name });\n        }\n        return this.reactivity;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Because having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is closed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onClose: (() => MaybePromise<any>)[] = [];\n    public closed: boolean = false;\n    public collections: Collections = {} as any;\n    public states: { [name: string]: RxState<any, Reactivity>; } = {};\n\n    /**\n     * Internally only use eventBulks$\n     * Do not use .$ or .observable$ because that has to transform\n     * the events which decreases performance.\n     */\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n\n    private closePromise: Promise<boolean> | null = null;\n\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk))\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     *\n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * In the past we tried to remove this and to ensure\n     * all storages only emit the same event bulks only once\n     * but it turns out this is just not possible for all storages.\n     * JavaScript processes, workers and browser tabs can be closed and started at any time\n     * which can cause cases where it is not possible to know if an event bulk has been emitted already.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        await Promise.all(\n            Object.entries(collectionCreators).map(async ([name, args]) => {\n                const collectionName: keyof CreatedCollections = name as any;\n                const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n                jsonSchemas[collectionName] = rxJsonSchema;\n                const schema = createRxSchema(rxJsonSchema, this.hashFunction);\n                schemas[collectionName] = schema;\n\n                // collection already exists\n                if ((this.collections as any)[name]) {\n                    throw newRxError('DB3', {\n                        name\n                    });\n                }\n\n                const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n                const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                    id: getPrimaryKeyOfInternalDocument(\n                        collectionNameWithVersion,\n                        INTERNAL_CONTEXT_COLLECTION\n                    ),\n                    key: collectionNameWithVersion,\n                    context: INTERNAL_CONTEXT_COLLECTION,\n                    data: {\n                        name: collectionName as any,\n                        schemaHash: await schema.hash,\n                        schema: schema.jsonSchema,\n                        version: schema.version,\n                        connectedStorages: []\n                    },\n                    _deleted: false,\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                };\n                bulkPutDocs.push({\n                    document: collectionDocData\n                });\n\n                const useArgs: any = Object.assign(\n                    {},\n                    args,\n                    {\n                        name: collectionName,\n                        schema,\n                        database: this\n                    }\n                );\n\n                // run hooks\n                const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n                (hookData as any).database = this;\n                hookData.name = name;\n                runPluginHooks('preCreateRxCollection', hookData);\n                useArgs.conflictHandler = hookData.conflictHandler;\n\n                useArgsByCollectionName[collectionName] = useArgs;\n            })\n        );\n\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        await Promise.all(\n            putDocsResult.error.map(async (error) => {\n                if (error.status !== 409) {\n                    throw newRxError('DB12', {\n                        database: this.name,\n                        writeError: error\n                    });\n                }\n                const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n                const collectionName = docInDb.data.name;\n                const schema = (schemas as any)[collectionName];\n                // collection already exists but has different schema\n                if (docInDb.data.schemaHash !== await schema.hash) {\n                    throw newRxError('DB6', {\n                        database: this.name,\n                        collection: collectionName,\n                        previousSchemaHash: docInDb.data.schemaHash,\n                        schemaHash: await schema.hash,\n                        previousSchema: docInDb.data.schema,\n                        schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                    });\n                }\n            })\n        );\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    addState<T = any>(_name?: string): Promise<RxState<T, Reactivity>> {\n        throw pluginMissing('state');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<RxMigrationState[]> {\n        throw pluginMissing('migration-schema');\n    }\n\n    /**\n     * closes the database-instance and all collections\n     */\n    public close(): Promise<boolean> {\n        if (this.closePromise) {\n            return this.closePromise;\n        }\n\n        const { promise, resolve } = createPromiseWithResolvers<boolean>();\n        const resolveClosePromise = (result: boolean) => {\n            if (this.onClosed) {\n                this.onClosed();\n            }\n            this.closed = true;\n            resolve(result);\n        };\n        this.closePromise = promise;\n\n        (async () => {\n            await runAsyncPluginHooks('preCloseRxDatabase', this);\n            /**\n             * Complete the event stream\n             * to stop all subscribers who forgot to unsubscribe.\n             */\n            this.eventBulks$.complete();\n\n            DB_COUNT--;\n            this._subs.map(sub => sub.unsubscribe());\n\n            /**\n             * closing the pseudo instance will throw\n             * because stuff is missing\n             * TODO we should not need the pseudo instance on runtime.\n             * we should generate the property list on build time.\n             */\n            if (this.name === 'pseudoInstance') {\n                resolveClosePromise(false);\n                return;\n            }\n\n            /**\n             * First wait until the database is idle\n             */\n            return this.requestIdlePromise()\n                .then(() => Promise.all(this.onClose.map(fn => fn())))\n                // close all collections\n                .then(() => Promise.all(\n                    Object.keys(this.collections as any)\n                        .map(key => (this.collections as any)[key])\n                        .map(col => col.close())\n                ))\n                // close internal storage instances\n                .then(() => this.internalStore.close())\n                .then(() => resolveClosePromise(true));\n        })();\n\n        return promise;\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .close()\n            .then(() => removeRxDatabase(this.name, this.storage, this.multiInstance, this.password));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions,\n        Reactivity\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and storage already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string,\n    storage: RxStorage<any, any>\n) {\n    if (USED_DATABASE_NAMES.has(getDatabaseNameKey(name, storage))) {\n        throw newRxError('DB8', {\n            name,\n            storage: storage.name,\n            link: 'https://rxdb.info/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * ponyfill for https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers\n */\nfunction createPromiseWithResolvers<T>() {\n    let resolve!: (value: T | PromiseLike<T>) => void;\n    let reject!: (reason?: any) => void;\n    const promise = new Promise<T>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    return { promise, resolve, reject };\n}\n\nfunction getDatabaseNameKey(\n    name: string,\n    storage: RxStorage<any, any>\n) {\n    return storage.name + '|' + name;\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password,\n            devMode: overwritable.isDevMode()\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection; },\n    Internals = any,\n    InstanceCreationOptions = any,\n    Reactivity = unknown\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = true,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        closeDuplicates = false,\n        allowSlowCount = false,\n        localDocuments = false,\n        hashFunction = defaultHashSha256,\n        reactivity\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions, Reactivity>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions, Reactivity>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    const databaseNameKey = getDatabaseNameKey(name, storage);\n    const databaseNameKeyUnclosedInstancesSet = DATABASE_UNCLOSED_INSTANCE_PROMISE_MAP.get(databaseNameKey) || new Set();\n    const instancePromiseWithResolvers = createPromiseWithResolvers<RxDatabase<Collections, Internals, InstanceCreationOptions, Reactivity>>();\n    const closeDuplicatesPromises = Array.from(databaseNameKeyUnclosedInstancesSet);\n    const onInstanceClosed = () => {\n        databaseNameKeyUnclosedInstancesSet.delete(instancePromiseWithResolvers.promise as any as Promise<RxDatabase>);\n        USED_DATABASE_NAMES.delete(databaseNameKey);\n    };\n\n    databaseNameKeyUnclosedInstancesSet.add(instancePromiseWithResolvers.promise as any as Promise<RxDatabase>);\n    DATABASE_UNCLOSED_INSTANCE_PROMISE_MAP.set(databaseNameKey, databaseNameKeyUnclosedInstancesSet);\n\n    (async () => {\n        if (closeDuplicates) {\n            await Promise.all(\n                closeDuplicatesPromises.map((unclosedInstancePromise) =>\n                    unclosedInstancePromise\n                        .catch(() => null)\n                        .then((instance) => instance && instance.close())\n                )\n            );\n        }\n\n        if (ignoreDuplicate) {\n            if (!overwritable.isDevMode()) {\n                throw newRxError('DB9', {\n                    database: name\n                });\n            }\n        } else {\n            // check if combination already used\n            throwIfDatabaseNameUsed(name, storage);\n        }\n\n        USED_DATABASE_NAMES.add(databaseNameKey);\n\n        const databaseInstanceToken = randomToken(10);\n        const storageInstance = await createRxDatabaseStorageInstance<\n            Internals,\n            InstanceCreationOptions\n        >(\n            databaseInstanceToken,\n            storage,\n            name,\n            instanceCreationOptions as any,\n            multiInstance,\n            password\n        );\n        const rxDatabase = new RxDatabaseBase(\n            name,\n            databaseInstanceToken,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            storageInstance,\n            hashFunction,\n            cleanupPolicy,\n            allowSlowCount,\n            reactivity,\n            onInstanceClosed\n        ) as RxDatabase<Collections>;\n\n        await runAsyncPluginHooks('createRxDatabase', {\n            database: rxDatabase,\n            creator: {\n                storage,\n                instanceCreationOptions,\n                name,\n                password,\n                multiInstance,\n                eventReduce,\n                ignoreDuplicate,\n                options,\n                localDocuments\n            }\n        });\n\n        return rxDatabase;\n    })()\n        .then((rxDatabase) => {\n            instancePromiseWithResolvers.resolve(rxDatabase);\n        })\n        .catch((err) => {\n            instancePromiseWithResolvers.reject(err);\n            onInstanceClosed();\n        });\n\n    return instancePromiseWithResolvers.promise;\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n *\n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>,\n    multiInstance: boolean = true,\n    password?: string\n): Promise<string[]> {\n    const databaseInstanceToken = randomToken(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        multiInstance,\n        password\n    );\n    const collectionDocs = await getAllCollectionDocuments(dbInternalsStorageInstance);\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName,\n            multiInstance,\n            password\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n *\n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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","ignoreList":[]}