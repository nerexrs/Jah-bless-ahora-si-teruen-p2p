{"version":3,"file":"sqlite-basics-helpers.js","names":["_index","require","_sqliteHelpers","BASICS_BY_SQLITE_LIB","WeakMap","getSQLiteBasicsNode","sqlite3","basics","get","open","name","Promise","resolve","Database","run","db","queryWithParams","Array","isArray","params","console","dir","Error","query","execSqlSQLiteNode","all","result","setPragma","key","value","context","method","data","close","closeSQLiteDatabaseNode","journalMode","set","getSQLiteBasicsNodeNative","constructor","promiseWait","prepared","prepare","mapNodeNativeParams","exec","map","param","database","operator","debug","resolved","res","rej","log","err","eventNames","message","includes","BASICS_BY_SQLITE_LIB_CAPACITOR","CAPACITOR_CONNECTION_BY_NAME","Map","capacitorOpenCloseQueue","PROMISE_RESOLVE_VOID","getSQLiteBasicsCapacitor","sqlite","capacitorCore","getFromMapOrCreate","innerBasics","dbName","then","createConnection","ensureNotFalsy","values","execute","getPlatform","EMPTY_FUNCTION","exports","getSQLiteBasicsQuickSQLite","openDB","executeAsync","rows","_array","getSQLiteBasicsExpoSQLite","options","directory","reject","sql","args","queryResult","Object","prototype","hasOwnProperty","call","error","closeAsync","getSQLiteBasicsExpoSQLiteAsync","getAllAsync","ret","runAsync","execAsync","getSQLiteBasicsWebSQL","webSQLDatabase","_db","rawResult","webSQLExecuteQuery","from","catch","runQueueWasmSQLite","getSQLiteBasicsWasm","debugId","randomToken","newQueue","dbNr","open_v2","nr","execWithParams","boolParamsToInt","getSQLiteBasicsTauri","load","select"],"sources":["../../../../src/plugins/storage-sqlite/sqlite-basics-helpers.ts"],"sourcesContent":["import {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getFromMapOrCreate,\n    randomToken,\n    promiseWait\n} from '../../index.ts';\nimport type {\n    Sqlite3Type,\n    SQLiteBasics,\n    SQLiteDatabaseClass,\n    SQLiteQueryWithParams\n} from './sqlite-types.ts';\nimport { boolParamsToInt } from './sqlite-helpers.ts';\n\n\nconst BASICS_BY_SQLITE_LIB = new WeakMap();\nexport function getSQLiteBasicsNode(\n    sqlite3: Sqlite3Type\n): SQLiteBasics<SQLiteDatabaseClass> {\n    let basics: SQLiteBasics<SQLiteDatabaseClass> = BASICS_BY_SQLITE_LIB.get(sqlite3);\n    if (!basics) {\n        basics = {\n            open: (name: string) => Promise.resolve(new sqlite3.Database(name)),\n            async run(\n                db: SQLiteDatabaseClass,\n                queryWithParams: SQLiteQueryWithParams\n            ) {\n                if (!Array.isArray(queryWithParams.params)) {\n                    console.dir(queryWithParams);\n                    throw new Error('no params array given for query: ' + queryWithParams.query);\n                }\n                await execSqlSQLiteNode(\n                    db,\n                    queryWithParams,\n                    'run'\n                );\n            },\n            async all(\n                db: SQLiteDatabaseClass,\n                queryWithParams: SQLiteQueryWithParams\n            ) {\n                const result = await execSqlSQLiteNode(\n                    db,\n                    queryWithParams,\n                    'all'\n                );\n                return result;\n            },\n            async setPragma(db, key, value) {\n                return await execSqlSQLiteNode(\n                    db,\n                    {\n                        query: 'PRAGMA ' + key + ' = ' + value,\n                        params: [],\n                        context: {\n                            method: 'setPragma',\n                            data: {\n                                key,\n                                value\n                            }\n                        }\n                    },\n                    'run'\n                );\n            },\n            async close(db: SQLiteDatabaseClass) {\n                return await closeSQLiteDatabaseNode(db);\n            },\n            journalMode: 'WAL2'\n        };\n        BASICS_BY_SQLITE_LIB.set(sqlite3, basics);\n    }\n    return basics;\n}\n\n\n\n/**\n * Uses the native sqlite that comes sshipped with node version 22+\n * @link https://nodejs.org/api/sqlite.html\n */\nexport function getSQLiteBasicsNodeNative(\n    // Pass the `sqlite.DatabaseSync` method here\n    constructor: any\n): SQLiteBasics<any> {\n    return {\n        open: async (name: string) => {\n            const db = new constructor(name);\n            return db;\n        },\n        all: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            await promiseWait(0); // TODO we should not need this\n            const prepared = db.prepare(queryWithParams.query);\n            const result = await prepared.all(...mapNodeNativeParams(queryWithParams.params));\n            return result;\n        },\n        run: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            const prepared = db.prepare(queryWithParams.query);\n            await prepared.run(...mapNodeNativeParams(queryWithParams.params));\n        },\n        setPragma: async (db, key, value) => {\n            await db.exec(`pragma ${key} = ${value};`);\n        },\n        close: async (db: any) => {\n            return db.close();\n        },\n        journalMode: 'WAL',\n    };\n};\n\n/**\n * For unknown reason we cannot bind boolean values\n * and have to map them to one and zero.\n * TODO create an issue at Node.js\n */\nexport function mapNodeNativeParams(params: SQLiteQueryWithParams['params']): SQLiteQueryWithParams['params'] {\n    return params.map(param => {\n        if (typeof param === 'boolean') {\n            if (param) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else {\n            return param;\n        }\n    });\n}\n\n\n/**\n * Promisified version of db.run()\n */\nexport function execSqlSQLiteNode(\n    database: SQLiteDatabaseClass,\n    queryWithParams: SQLiteQueryWithParams,\n    operator: 'run' | 'all'\n): any {\n    const debug = false;\n    let resolved = false;\n    return new Promise((res, rej) => {\n        if (debug) {\n            console.log('# execSqlSQLiteNode() ' + queryWithParams.query);\n        }\n        database[operator](\n            queryWithParams.query,\n            queryWithParams.params,\n            ((err: any, result: any) => {\n                if (resolved) {\n                    throw new Error('callback called multiple times ' + queryWithParams.query);\n                }\n                resolved = true;\n                if (err) {\n                    if (debug) {\n                        console.log('---- ERROR RUNNING SQL:');\n                        console.log(queryWithParams.query);\n                        console.dir(queryWithParams.params);\n                        console.dir(err);\n                        console.log('----');\n                    }\n                    rej(err);\n                } else {\n                    if (debug) {\n                        console.log('execSql() result: ' + database.eventNames());\n                        console.log(queryWithParams.query);\n                        console.dir(result);\n                        console.log('execSql() result:');\n                        console.log(queryWithParams.query);\n                        console.dir(queryWithParams.params);\n                        console.log('execSql() result -------------------------');\n                    }\n                    res(result);\n                }\n            })\n        );\n    });\n}\n\n\nexport function closeSQLiteDatabaseNode(\n    database: SQLiteDatabaseClass\n): Promise<void> {\n    return new Promise((res, rej) => {\n        let resolved = false;\n        database.close((err: any) => {\n            if (resolved) {\n                throw new Error('close() callback called multiple times');\n            }\n            resolved = true;\n            if (\n                err &&\n                !err.message.includes('Database is closed')\n            ) {\n                rej(err);\n            } else {\n                res();\n            }\n        });\n    });\n}\n\n\n\n\n\n\n\n\ntype SQLiteCapacitorDatabase = any;\ntype SQLiteConnection = any;\n\nconst BASICS_BY_SQLITE_LIB_CAPACITOR: WeakMap<SQLiteConnection, SQLiteBasics<SQLiteCapacitorDatabase>> = new WeakMap();\nconst CAPACITOR_CONNECTION_BY_NAME = new Map();\n/**\n * In capacitor it is not allowed to reopen an already\n * open database connection. So we have to queue the open-close\n * calls so that they do not run in parallel and we do not open&close\n * database connections at the same time.\n */\nlet capacitorOpenCloseQueue = PROMISE_RESOLVE_VOID;\n\nexport function getSQLiteBasicsCapacitor(\n    sqlite: SQLiteConnection,\n    capacitorCore: any\n): SQLiteBasics<SQLiteCapacitorDatabase> {\n    const basics = getFromMapOrCreate<SQLiteConnection, SQLiteBasics<SQLiteCapacitorDatabase>>(\n        BASICS_BY_SQLITE_LIB_CAPACITOR,\n        sqlite,\n        () => {\n            const innerBasics: SQLiteBasics<SQLiteCapacitorDatabase> = {\n                open(dbName: string) {\n                    capacitorOpenCloseQueue = capacitorOpenCloseQueue.then(async () => {\n                        const db = await getFromMapOrCreate(\n                            CAPACITOR_CONNECTION_BY_NAME,\n                            dbName,\n                            () => sqlite.createConnection(dbName, false, 'no-encryption', 1)\n                        );\n                        await db.open();\n                        return db;\n                    });\n                    return capacitorOpenCloseQueue;\n                },\n                async run(\n                    db: SQLiteCapacitorDatabase,\n                    queryWithParams: SQLiteQueryWithParams\n                ) {\n                    await db.run(\n                        queryWithParams.query,\n                        queryWithParams.params,\n                        false\n                    );\n                },\n                async all(\n                    db: SQLiteCapacitorDatabase,\n                    queryWithParams: SQLiteQueryWithParams\n                ) {\n                    const result: any = await db.query(\n                        queryWithParams.query,\n                        queryWithParams.params\n                    );\n                    return ensureNotFalsy(result.values);\n                },\n                setPragma(db, key, value) {\n                    return db.execute('PRAGMA ' + key + ' = ' + value, false);\n                },\n                close(db: SQLiteCapacitorDatabase) {\n                    capacitorOpenCloseQueue = capacitorOpenCloseQueue.then(() => {\n                        return db.close();\n                    });\n                    return capacitorOpenCloseQueue;\n                },\n                /**\n                 * On android, there is already WAL mode set.\n                 * So we do not have to set it by our own.\n                 * @link https://github.com/capacitor-community/sqlite/issues/258#issuecomment-1102966087\n                 */\n                journalMode: capacitorCore.getPlatform() === 'android' ? '' : 'WAL'\n            };\n            return innerBasics;\n        }\n    );\n    return basics;\n}\n\n\n\n\n\ntype SQLiteQuickDatabase = any;\ntype SQLiteQuickConnection = any;\nexport const EMPTY_FUNCTION = () => { };\n\nexport function getSQLiteBasicsQuickSQLite(\n    openDB: any\n): SQLiteBasics<SQLiteQuickDatabase> {\n    return {\n        open: async (name: string) => {\n            return await openDB(\n                { name }\n            );\n        },\n        all: async (db: SQLiteQuickConnection, queryWithParams: SQLiteQueryWithParams) => {\n            const result = await db.executeAsync(\n                queryWithParams.query,\n                queryWithParams.params\n            );\n            return result.rows._array;\n        },\n        run: (db: SQLiteQuickConnection, queryWithParams: SQLiteQueryWithParams) => {\n            return db.executeAsync(\n                queryWithParams.query,\n                queryWithParams.params\n            );\n        },\n        setPragma(db, key, value) {\n            return db.executeAsync(\n                'PRAGMA ' + key + ' = ' + value,\n                []\n            );\n        },\n        close: async (db: SQLiteQuickConnection) => {\n            return await db.close(\n                EMPTY_FUNCTION,\n                EMPTY_FUNCTION,\n            );\n        },\n        journalMode: '',\n    };\n}\n\n\n\n\n/**\n * @deprecated Use getSQLiteBasicsExpoSQLiteAsync() instead\n */\nexport function getSQLiteBasicsExpoSQLite(\n    openDB: any,\n    options?: any,\n    directory?: any\n): SQLiteBasics<any> {\n    return {\n        open: async (name: string,) => {\n            return await openDB(name, options, directory);\n        },\n        all: (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            const result = new Promise<any>((resolve, reject) => {\n                db.exec(\n                    [{ sql: queryWithParams.query, args: queryWithParams.params }],\n                    false,\n                    (err: any, res: any) => {\n                        if (err) {\n                            return reject(err);\n                        }\n                        if (Array.isArray(res)) {\n                            const queryResult = res[0]; // there is only one query\n                            if (Object.prototype.hasOwnProperty.call(queryResult, 'rows')) {\n                                return resolve(queryResult.rows);\n                            }\n                            return reject(queryResult.error);\n                        }\n                        return reject(new Error(`getSQLiteBasicsExpoSQLite.all() response is not an array: ${res}`));\n                    }\n                );\n            });\n            return result;\n        },\n        run: (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            return new Promise<any>((resolve, reject) => {\n                db.exec([{ sql: queryWithParams.query, args: queryWithParams.params }], false, (err: any, res: any) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    if (Array.isArray(res) && res[0] && res[0].error) {\n                        return reject(res);\n                    } else {\n                        resolve(res);\n                    };\n                });\n            });\n        },\n        setPragma(db, key, value) {\n            return new Promise<any>((resolve, reject) => {\n                db.exec([{ sql: `pragma ${key} = ${value};`, args: [] }], false, (err: any, res: any) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    if (Array.isArray(res) && res[0] && res[0].error) {\n                        return reject(res);\n                    } else {\n                        resolve(res);\n                    };\n                });\n            });\n        },\n        close: async (db: any) => {\n            return await db.closeAsync();\n        },\n        journalMode: '',\n    };\n};\n\n\n/**\n * @link https://docs.expo.dev/versions/latest/sdk/sqlite/\n */\nexport function getSQLiteBasicsExpoSQLiteAsync(\n    openDB: any,\n    options?: any,\n    directory?: any\n): SQLiteBasics<any> {\n    return {\n        open: async (name: string) => {\n            return await openDB(name, options, directory);\n        },\n        all: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            const result = await db.getAllAsync(\n                queryWithParams.query,\n                queryWithParams.params\n            );\n            return result as any;\n        },\n        run: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            const ret = await db.runAsync(\n                queryWithParams.query,\n                queryWithParams.params\n            );\n            return ret as any;\n        },\n        async setPragma(db, key, value) {\n            await db.execAsync('PRAGMA ' + key + ' = ' + value);\n        },\n        close: async (db: any) => {\n            return await db.closeAsync();\n        },\n        journalMode: '',\n    };\n};\n\n\n\n/**\n * Build to be compatible with packages\n * that use the websql npm package like:\n * @link https://www.npmjs.com/package/react-native-sqlite-2\n * @link https://www.npmjs.com/package/websql\n * Use like:\n * import SQLite from 'react-native-sqlite-2';\n * getRxStorageSQLite({\n *   sqliteBasics: getSQLiteBasicsWebSQL(SQLite.openDatabase)\n * });\n *\n */\nexport function getSQLiteBasicsWebSQL(\n    openDB: any,\n): SQLiteBasics<any> {\n    return {\n        open: async (name: string) => {\n            const webSQLDatabase = await openDB(name, '1.0', '', 1);\n            return ensureNotFalsy(webSQLDatabase._db);\n        },\n        all: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            const rawResult = await webSQLExecuteQuery(db, queryWithParams);\n            const rows = Array.from(rawResult.rows);\n            return rows as any;\n        },\n        run: async (db: any, queryWithParams: SQLiteQueryWithParams) => {\n            await webSQLExecuteQuery(db, queryWithParams);\n        },\n        setPragma: async (db, key, value) => {\n            await webSQLExecuteQuery(db, {\n                query: `pragma ${key} = ${value};`,\n                params: [],\n                context: {\n                    method: 'setPragma',\n                    data: {\n                        key,\n                        value\n                    }\n                }\n            }).catch(err => {\n                /**\n                 * WebSQL in the browser does not allow us to set any pragma\n                 * so we have to catch the error.\n                 * @link https://stackoverflow.com/a/10298712/3443137\n                 */\n                if (err.message.includes('23 not authorized')) {\n                    return;\n                }\n                throw err;\n            });\n        },\n        close: async (db: any) => {\n            /**\n             * The WebSQL API itself has no close() method.\n             * But some libraries have different custom close methods.\n             */\n            if (typeof db.closeAsync === 'function') {\n                return await db.closeAsync();\n            }\n            if (typeof db.close === 'function') {\n                return await db.close();\n            }\n        },\n        journalMode: '',\n    };\n};\n\nexport function webSQLExecuteQuery(\n    db: any,\n    queryWithParams: SQLiteQueryWithParams\n): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n        db.exec(\n            [{ sql: queryWithParams.query, args: queryWithParams.params }],\n            false,\n            (err: any, res: any) => {\n                if (err) {\n                    return reject(err);\n                }\n                if (Array.isArray(res) && res[0] && res[0].error) {\n                    return reject(res[0].error);\n                } else {\n                    return resolve(res[0]);\n                };\n            }\n        );\n    });\n}\n\n\n\n/**\n * Build to be compatible with packages\n * that use SQLite compiled to webassembly:\n * @link https://github.com/rhashimoto/wa-sqlite\n * Use like:\n * ```ts\n * import sqlite3InitModule from '@sqlite.org/sqlite-wasm';\n * const sqliteWasm = await sqlite3InitModule();\n * getSQLiteBasicsWasm({ dbConstructor: sqliteWasm.oo1.DB });\n * ```\n *\n */\n\n\n/**\n * TODO the wa-sqlite module has problems\n * when running prepared statements with params\n * in parallel. So we de-parrallel the runs here.\n * This is bad for performance and should be fixed at the\n * wa-sqlite repo.\n */\nlet runQueueWasmSQLite: Promise<any> = PROMISE_RESOLVE_VOID;\nexport type WasmSqliteDb = { nr: number; name: string; };\nexport function getSQLiteBasicsWasm(\n    sqlite3: any,\n): SQLiteBasics<WasmSqliteDb> {\n    const debugId = randomToken(5);\n    console.log('getSQLiteBasicsWasm() debugId: ' + debugId);\n    return {\n        debugId,\n        open: (name: string) => {\n            const newQueue = runQueueWasmSQLite.then(async () => {\n                const dbNr = await sqlite3.open_v2(name);\n                return { nr: dbNr, name };\n            });\n            runQueueWasmSQLite = newQueue.catch(() => { });\n            return newQueue as any;\n        },\n        all: (db, queryWithParams: SQLiteQueryWithParams) => {\n            const newQueue = runQueueWasmSQLite.then(async () => {\n                const result = await sqlite3.execWithParams(\n                    db.nr,\n                    queryWithParams.query,\n                    boolParamsToInt(queryWithParams.params)\n                );\n                return result.rows;\n            });\n            runQueueWasmSQLite = newQueue.catch(() => { });\n            return newQueue as any;\n        },\n        run: (db, queryWithParams: SQLiteQueryWithParams) => {\n            const newQueue = runQueueWasmSQLite.then(async () => {\n                await sqlite3.run(db.nr, queryWithParams.query, queryWithParams.params);\n                // return new Promise(async (res) => {\n                //     console.log('run start! ' + queryWithParams.query);\n                //     const runResult = await sqlite3.run(db.nr, queryWithParams, (a1: any, a2: any) => {\n                //         console.log('run result ccallback:');\n                //         console.log(JSON.stringify({ a1, a2 }));\n                //         res();\n                //     });\n                //     console.log('runResult:');\n                //     console.log(JSON.stringify(runResult));\n                // });\n            });\n            runQueueWasmSQLite = newQueue.catch(() => {});\n            return newQueue as any;\n        },\n        setPragma: (db, key, value) => {\n            const newQueue = runQueueWasmSQLite.then(async () => {\n                await sqlite3.exec(db.nr, `pragma ${key} = ${value};`);\n            });\n            runQueueWasmSQLite = newQueue.catch(() => {});\n            return newQueue as any;\n        },\n        close: (db) => {\n            const newQueue = runQueueWasmSQLite.then(async () => {\n                await sqlite3.close(db.nr);\n            });\n            runQueueWasmSQLite = newQueue.catch(() => {});\n            return newQueue as any;\n        },\n        journalMode: \"WAL\",\n    };\n}\n\nexport function getSQLiteBasicsTauri(sqlite3: Sqlite3Type): SQLiteBasics<any> {\n    let basics: SQLiteBasics<any> = BASICS_BY_SQLITE_LIB.get(sqlite3);\n    if (!basics) {\n        basics = {\n            async open(name: string) {\n                return await sqlite3.load(`sqlite:${name}.db`);\n            },\n            async run(\n                db: SQLiteDatabaseClass,\n                queryWithParams: SQLiteQueryWithParams,\n            ) {\n                await db.execute(queryWithParams.query, queryWithParams.params);\n            },\n            async all(\n                db: SQLiteDatabaseClass,\n                queryWithParams: SQLiteQueryWithParams,\n            ) {\n                return await db.select(\n                    queryWithParams.query,\n                    queryWithParams.params,\n                );\n            },\n            async setPragma(\n                db: SQLiteDatabaseClass,\n                key: string,\n                value: string,\n            ) {\n                await db.execute(`PRAGMA ${key} = ${value};`);\n            },\n            async close(db: SQLiteDatabaseClass) {\n                await db.close();\n            },\n            journalMode: 'WAL2',\n        };\n        BASICS_BY_SQLITE_LIB.set(sqlite3, basics);\n    }\n    return basics;\n}\n"],"mappings":"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","ignoreList":[]}