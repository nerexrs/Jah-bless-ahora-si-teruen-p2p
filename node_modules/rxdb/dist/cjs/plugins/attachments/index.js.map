{"version":3,"file":"index.js","names":["_rxjs","require","_index","_attachmentsUtils","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","RxAttachment","doc","id","type","length","digest","assignMethodsToAttachment","_proto","remove","collection","incrementalWriteQueue","addWrite","_data","docWriteData","_attachments","then","getData","plainDataBase64","getDataBase64","ret","createBlobFromBase64","getStringData","data","asString","blobToString","storageInstance","getAttachmentData","primary","fromStorageInstanceResult","attachmentData","rxDocument","putAttachment","ensureSchemaSupportsAttachments","dataSize","getBlobSize","dataString","blobToBase64String","putAttachmentBase64","database","hashFunction","flatClone","writeResult","newDocument","_docCache","getCachedRxDocument","attachmentDataOfId","attachment","getAttachment","docData","allAttachments","map","preMigrateDocument","attachments","newAttachments","Promise","all","attachmentId","docPrimary","oldCollection","schema","primaryPath","rawAttachmentData","postMigrateDocument","_action","PROMISE_RESOLVE_VOID","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","$","pipe","entries","toJSON","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs';\n\nimport {\n    blobToBase64String,\n    blobToString,\n    createBlobFromBase64,\n    flatClone,\n    getBlobSize,\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils/index.ts';\nimport type {\n    RxDocument,\n    RxPlugin,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData,\n    RxCollection,\n    RxAttachmentCreatorBase64\n} from '../../types/index.ts';\nimport {\n    assignMethodsToAttachment,\n    ensureSchemaSupportsAttachments\n} from './attachments-utils.ts';\n\n\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        return this.doc.collection.incrementalWriteQueue.addWrite(\n            this.doc._data,\n            docWriteData => {\n                delete docWriteData._attachments[this.id];\n                return docWriteData;\n            }\n        ).then(() => { });\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<Blob> {\n        const plainDataBase64 = await this.getDataBase64();\n        const ret = await createBlobFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobToString(data);\n        return asString;\n    }\n\n    async getDataBase64(): Promise<string> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id,\n            this.digest\n        );\n        return plainDataBase64;\n    }\n}\n\nexport function fromStorageInstanceResult<RxDocType>(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument<RxDocType>\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\n\n\nexport async function putAttachment<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreator\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = getBlobSize(attachmentData.data);\n    const dataString = await blobToBase64String(attachmentData.data);\n\n    return this.putAttachmentBase64({\n        id: attachmentData.id,\n        length: dataSize,\n        type: attachmentData.type,\n        data: dataString\n    }) as any;\n}\n\nexport async function putAttachmentBase64<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreatorBase64\n) {\n    ensureSchemaSupportsAttachments(this);\n    const digest = await this.collection.database.hashFunction(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = attachmentData.data;\n\n    return this.collection.incrementalWriteQueue.addWrite(\n        this._data,\n        (docWriteData: RxDocumentWriteData<RxDocType>) => {\n            docWriteData = flatClone(docWriteData);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n            docWriteData._attachments[id] = {\n                length: attachmentData.length,\n                type,\n                data,\n                digest\n            };\n            return docWriteData;\n        }).then(writeResult => {\n            const newDocument = this.collection._docCache.getCachedRxDocument(writeResult);\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                newDocument\n            );\n            return attachment;\n        });\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: RxCollection<RxDocType>;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(\n                    docPrimary,\n                    attachmentId,\n                    attachment.digest\n                );\n                const digest = await data.oldCollection.database.hashFunction(rawAttachmentData);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData,\n                    digest\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.putAttachmentBase64 = putAttachmentBase64;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$(this: RxDocument) {\n                    return this.$\n                        .pipe(\n                            map(rxDocument => Object.entries(\n                                rxDocument.toJSON(true)._attachments\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n\n\nexport * from './attachments-utils.ts';\n"],"mappings":"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","ignoreList":[]}