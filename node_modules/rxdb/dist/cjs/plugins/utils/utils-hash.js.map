{"version":3,"file":"utils-hash.js","names":["_rxError","require","hashFn","getHashFn","crypto","subtle","digest","newRxError","args","typeof_crypto","typeof_crypto_subtle","typeof_crypto_subtle_digest","bind","nativeSha256","input","data","TextEncoder","encode","hashBuffer","hash","Array","prototype","map","call","Uint8Array","x","toString","slice","join","defaultHashSha256","exports","hashStringToNumber","str","nr","len","length","i","charCodeAt"],"sources":["../../../../src/plugins/utils/utils-hash.ts"],"sourcesContent":["import { newRxError } from '../../rx-error.ts';\nimport type { HashFunction } from '../../types/index.d.ts';\n\n/**\n * Cache this here so we do not have to run the try-catch\n * each time for better performance.\n * If your JavaScript runtime does not support crypto.subtle.digest,\n * provide your own hash function when calling createRxDatabase().\n */\nlet hashFn: typeof crypto.subtle.digest;\nfunction getHashFn() {\n    if (hashFn) {\n        return hashFn;\n    }\n    if (\n        typeof crypto === 'undefined' ||\n        typeof crypto.subtle === 'undefined' ||\n        typeof crypto.subtle.digest !== 'function'\n    ) {\n        throw newRxError('UT8', {\n            args: {\n                typeof_crypto: typeof crypto,\n                typeof_crypto_subtle: typeof crypto?.subtle,\n                typeof_crypto_subtle_digest: typeof crypto?.subtle?.digest\n            }\n        });\n    }\n    hashFn = crypto.subtle.digest.bind(crypto.subtle);\n    return hashFn;\n}\n\nexport async function nativeSha256(input: string) {\n    const data = new TextEncoder().encode(input);\n    const hashBuffer = await getHashFn()('SHA-256', data);\n    /**\n     * @link https://jameshfisher.com/2017/10/30/web-cryptography-api-hello-world/\n     */\n    const hash = Array.prototype.map.call(\n        new Uint8Array(hashBuffer),\n        x => (('00' + x.toString(16)).slice(-2))\n    ).join('');\n    return hash;\n}\n\nexport const defaultHashSha256: HashFunction = nativeSha256;\n\n\nexport function hashStringToNumber(str: string): number {\n    let nr = 0;\n    const len = str.length;\n    for (let i = 0; i < len; i++) {\n        nr = nr + str.charCodeAt(i);\n        nr |= 0; // Convert to 32bit integer, improves performance\n    }\n    return nr;\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAmC;AACvC,SAASC,SAASA,CAAA,EAAG;EACjB,IAAID,MAAM,EAAE;IACR,OAAOA,MAAM;EACjB;EACA,IACI,OAAOE,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,MAAM,KAAK,WAAW,IACpC,OAAOD,MAAM,CAACC,MAAM,CAACC,MAAM,KAAK,UAAU,EAC5C;IACE,MAAM,IAAAC,mBAAU,EAAC,KAAK,EAAE;MACpBC,IAAI,EAAE;QACFC,aAAa,EAAE,OAAOL,MAAM;QAC5BM,oBAAoB,EAAE,OAAON,MAAM,EAAEC,MAAM;QAC3CM,2BAA2B,EAAE,OAAOP,MAAM,EAAEC,MAAM,EAAEC;MACxD;IACJ,CAAC,CAAC;EACN;EACAJ,MAAM,GAAGE,MAAM,CAACC,MAAM,CAACC,MAAM,CAACM,IAAI,CAACR,MAAM,CAACC,MAAM,CAAC;EACjD,OAAOH,MAAM;AACjB;AAEO,eAAeW,YAAYA,CAACC,KAAa,EAAE;EAC9C,IAAMC,IAAI,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;EAC5C,IAAMI,UAAU,GAAG,MAAMf,SAAS,CAAC,CAAC,CAAC,SAAS,EAAEY,IAAI,CAAC;EACrD;AACJ;AACA;EACI,IAAMI,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,CACjC,IAAIC,UAAU,CAACN,UAAU,CAAC,EAC1BO,CAAC,IAAK,CAAC,IAAI,GAAGA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAC1C,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACV,OAAOT,IAAI;AACf;AAEO,IAAMU,iBAA+B,GAAAC,OAAA,CAAAD,iBAAA,GAAGhB,YAAY;AAGpD,SAASkB,kBAAkBA,CAACC,GAAW,EAAU;EACpD,IAAIC,EAAE,GAAG,CAAC;EACV,IAAMC,GAAG,GAAGF,GAAG,CAACG,MAAM;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC1BH,EAAE,GAAGA,EAAE,GAAGD,GAAG,CAACK,UAAU,CAACD,CAAC,CAAC;IAC3BH,EAAE,IAAI,CAAC,CAAC,CAAC;EACb;EACA,OAAOA,EAAE;AACb","ignoreList":[]}