{"version":3,"file":"index.js","names":["_index","require","_index2","_index3","_index4","_rxjs","_mongodb","_mongodbHelper","_mongodbCheckpoint","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_mongodbHelper2","RxMongoDBReplicationState","_RxReplicationState","mongoClient","mongoDatabase","mongoCollection","options","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","_inheritsLoose2","default","RxReplicationState","replicateMongoDB","addRxPlugin","RxDBLeaderElectionPlugin","primaryPath","schema","waitForLeadership","pullStream$","Subject","MongoClient","mongodb","connection","MONGO_OPTIONS_DRIVER_INFO","db","databaseName","collectionName","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","result","iterateCheckpoint","documents","docs","checkpoint","ensureNotFalsy","modifier","stream$","asObservable","replicationPrimitivesPush","rows","conflicts","session","startSession","startTransaction","pushTransactionOptions","ids","map","row","newDocumentState","currentDocsArray","find","$in","toArray","currentDocsMap","Map","doc","set","promises","toMongoDoc","rxdbDocToMongo","docId","current","remoteDocState","mongodbDocToRxDB","undefined","assumedMaster","assumedMasterState","_deleted","conflictHandler","isEqual","deleteOne","updateOne","$set","upsert","conflicting","flatClone","insertOne","Promise","all","commitTransaction","replicationState","startBefore","start","bind","cancelBefore","cancel","changestream","startChangeStream","subjects","error","on","next","close","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-mongodb/index.ts"],"sourcesContent":["import {\n    ensureNotFalsy,\n    flatClone\n} from '../../plugins/utils/index.ts';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    RxDocumentData\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    WithDeleted\n} from '../../index.ts';\n\nimport { Subject } from 'rxjs';\nimport type {\n    MongoDbCheckpointType,\n    SyncOptionsMongoDB\n} from './mongodb-types.ts';\n\nimport {\n    Db as MongoDatabase,\n    Collection as MongoCollection,\n    MongoClient,\n    ClientSession\n} from 'mongodb';\nimport { MONGO_OPTIONS_DRIVER_INFO } from '../storage-mongodb/mongodb-helper.ts';\nimport { iterateCheckpoint } from './mongodb-checkpoint.ts';\nimport { mongodbDocToRxDB, rxdbDocToMongo, startChangeStream } from './mongodb-helper.ts';\n\nexport * from './mongodb-helper.ts';\nexport * from './mongodb-checkpoint.ts';\nexport type * from './mongodb-types.ts';\n\nexport class RxMongoDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, MongoDbCheckpointType> {\n\n    constructor(\n        public readonly mongoClient: MongoClient,\n        public readonly mongoDatabase: MongoDatabase,\n        public readonly mongoCollection: MongoCollection<RxDocumentData<RxDocType> | any>,\n        public readonly options: SyncOptionsMongoDB<RxDocType>,\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType, any, any>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, MongoDbCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n\n        super(\n            replicationIdentifier,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateMongoDB<RxDocType>(options: SyncOptionsMongoDB<RxDocType>) {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const primaryPath = options.collection.schema.primaryPath;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, MongoDbCheckpointType>> = new Subject();\n\n    const mongoClient = new MongoClient(options.mongodb.connection, MONGO_OPTIONS_DRIVER_INFO);\n    const mongoDatabase = mongoClient.db(options.mongodb.databaseName);\n    const mongoCollection = mongoDatabase.collection(options.mongodb.collectionName);\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, MongoDbCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: MongoDbCheckpointType | undefined,\n                batchSize: number\n            ) {\n                const result = await iterateCheckpoint<RxDocType>(primaryPath, mongoCollection, batchSize, lastPulledCheckpoint);\n                return {\n                    documents: result.docs,\n                    checkpoint: result.checkpoint\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const conflicts: WithDeleted<RxDocType>[] = [];\n                const session: ClientSession = mongoClient.startSession();\n                session.startTransaction(options.mongodb.pushTransactionOptions);\n                const ids = rows.map(row => (row.newDocumentState as any)[primaryPath]);\n                const currentDocsArray = await mongoCollection.find(\n                    { [primaryPath]: { $in: ids } },\n                    { session }\n                ).toArray();\n                const currentDocsMap = new Map<any, any>();\n                currentDocsArray.forEach(doc => {\n                    currentDocsMap.set(doc[primaryPath], doc);\n                });\n                let promises: Promise<any>[] = [];\n                rows.forEach(row => {\n                    const toMongoDoc = rxdbDocToMongo(row.newDocumentState as any);\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    const current = currentDocsMap.get(docId);\n                    const remoteDocState = current ? mongodbDocToRxDB(primaryPath, current) : undefined;\n\n                    /**\n                     * We do not want to require a deleted-flag or any RxDB specific stuff on the RxDB side.\n                     * So for deletes we have to hack around this.\n                     */\n                    let assumedMaster = row.assumedMasterState;\n                    if (row.newDocumentState._deleted) {\n                        if (remoteDocState) {\n                            if (!assumedMaster) {\n                                // remote exists but not assumed -> conflict\n                                conflicts.push(remoteDocState);\n                            } else if (assumedMaster._deleted) {\n                                // remote exists but assumed as deleted -> conflict\n                                conflicts.push(remoteDocState);\n                            } else {\n                                // remote exists and assumed to exist -> check for normal conflict or do the deletion-write\n                                if (options.collection.conflictHandler.isEqual(remoteDocState, assumedMaster, 'mongodb-pull-equal-check-deleted') === false) {\n                                    // conflict\n                                    conflicts.push(remoteDocState);\n                                } else {\n                                    promises.push(\n                                        mongoCollection.deleteOne(\n                                            {\n                                                [primaryPath]: docId\n                                            },\n                                            {\n                                                session\n                                            }\n                                        )\n                                    );\n                                }\n\n                            }\n                        } else {\n                            if (!assumedMaster) {\n                                // no remote and no assumed master -> insertion of deleted -> do nothing\n                            } else if (assumedMaster._deleted) {\n                                // no remote and assumed master also deleted -> insertion of deleted -> do nothing\n                            }\n                        }\n                    } else {\n                        /**\n                         * Non-deleted are handled normally like in every other\n                         * of the replication plugins.\n                         */\n                        if (\n                            remoteDocState &&\n                            (\n                                !row.assumedMasterState ||\n                                options.collection.conflictHandler.isEqual(remoteDocState, row.assumedMasterState, 'mongodb-pull-equal-check') === false\n                            )\n                        ) {\n                            // conflict\n                            conflicts.push(remoteDocState);\n                        } else {\n                            if (current) {\n                                if (row.newDocumentState._deleted) {\n                                    promises.push(\n                                        mongoCollection.deleteOne(\n                                            {\n                                                [primaryPath]: docId\n                                            },\n                                            {\n                                                session\n                                            }\n                                        )\n                                    );\n                                } else {\n                                    promises.push(\n                                        mongoCollection.updateOne(\n                                            { [primaryPath]: docId },\n                                            { $set: toMongoDoc },\n                                            {\n                                                upsert: true,\n                                                session\n                                            }\n                                        )\n                                    );\n                                }\n                            } else {\n                                /**\n                                 * No current but has assumed.\n                                 * This means the server state was deleted\n                                 * and we have a conflict.\n                                 */\n                                if (row.assumedMasterState) {\n                                    const conflicting = flatClone(row.assumedMasterState);\n                                    conflicting._deleted = true;\n                                    conflicts.push(conflicting);\n                                } else {\n                                    if (row.newDocumentState._deleted) {\n                                        // inserting deleted -> do nothing\n                                    } else {\n                                        promises.push(\n                                            mongoCollection.insertOne(toMongoDoc, { session })\n                                        );\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n                await Promise.all(promises);\n                await session.commitTransaction();\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxMongoDBReplicationState<RxDocType>(\n        mongoClient,\n        mongoDatabase,\n        mongoCollection,\n        options,\n        options.replicationIdentifier,\n        options.collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Subscribe to changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = async () => {\n            const changestream = await startChangeStream(mongoCollection, undefined, replicationState.subjects.error);\n            changestream.on('change', () => {\n                // TODO use the documents data of the change instead of emitting the RESYNC flag\n                pullStream$.next('RESYNC');\n            });\n            replicationState.cancel = async () => {\n                await changestream.close();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}