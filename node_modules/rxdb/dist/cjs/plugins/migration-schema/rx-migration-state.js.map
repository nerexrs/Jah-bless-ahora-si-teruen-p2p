{"version":3,"file":"rx-migration-state.js","names":["_rxjs","require","_rxError","_migrationHelpers","_index","_rxStorageHelper","_broadcastChannel","_index2","_overwritable","_rxDatabaseInternalStore","_rxQueryHelper","RxMigrationState","exports","collection","migrationStrategies","statusDocKey","name","schema","version","join","started","canceled","updateStatusHandlers","updateStatusQueue","PROMISE_RESOLVE_TRUE","database","oldCollectionMeta","getOldCollectionMeta","mustMigrate","statusDocId","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_MIGRATION_STATUS","addMigrationStateToDatabase","$","observeSingle","internalStore","pipe","filter","d","map","ensureNotFalsy","data","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","_proto","prototype","getStatus","firstValueFrom","startMigration","batchSize","MIGRATION_DEFAULT_BATCH_SIZE","must","newRxError","multiInstance","broadcastChannel","BroadcastChannel","leaderElector","createLeaderElection","awaitLeadership","oldStorageInstance","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","options","password","devMode","overwritable","isDevMode","connectedInstances","getConnectedStorageInstances","totalCount","countAllDocuments","concat","r","oldStorage","updateStatus","s","count","total","Promise","all","connectedInstance","addConnectedStorageToCollection","newStorage","migrateStorage","close","storageInstance","originalStorageInstance","err","status","error","errorToPlainJson","writeSingle","previous","document","Object","assign","_deleted","isConflict","isBulkWriteConflictError","documentInDb","handler","push","then","length","useHandlers","getSingleDocument","newDoc","clone","id","key","context","handled","percent","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","oneHandler","Math","round","deepEqual","onClose","cancel","replicationMetaStorageInstance","getRxReplicationMetaInstanceSchema","hasEncryption","replicationHandlerBase","rxStorageInstanceToReplicationHandler","defaultConflictHandler","replicationState","replicateRxStorageInstance","keepMeta","identifier","replicationHandler","masterChangesSince","resolve","checkpoint","documents","masterWrite","rows","migratedRows","row","newDocData","newDocumentState","title","META_INSTANCE_SCHEMA_TITLE","docData","isCheckpoint","assumedMasterState","undefined","migratedDocData","migrateDocumentData","newRow","result","masterChangeStream$","Subject","asObservable","forkInstance","metaInstance","pushBatchSize","pullBatchSize","conflictHandler","hashFunction","hasError","events","subscribe","processed","up","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","remove","cancelRxStorageReplication","storageInstances","ret","instance","preparedQuery","prepareQuery","normalizeMangoQuery","selector","countResult","connectedStorages","connectedStorage","Error","newSchema","jsonSchema","migratePromise","race"],"sources":["../../../../src/plugins/migration-schema/rx-migration-state.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    filter,\n    firstValueFrom,\n    map,\n    shareReplay\n} from 'rxjs';\nimport {\n    isBulkWriteConflictError,\n    newRxError\n} from '../../rx-error.ts';\nimport type {\n    InternalStoreCollectionDocType,\n    NumberFunctionMap,\n    RxCollection,\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxTypeError\n} from '../../types/index.d.ts';\nimport {\n    MIGRATION_DEFAULT_BATCH_SIZE,\n    addMigrationStateToDatabase,\n    getOldCollectionMeta,\n    migrateDocumentData,\n    mustMigrate\n} from './migration-helpers.ts';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    clone,\n    deepEqual,\n    ensureNotFalsy,\n    errorToPlainJson,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    promiseWait\n} from '../utils/index.ts';\nimport type {\n    MigrationStatusUpdate,\n    RxMigrationStatus,\n    RxMigrationStatusDocument\n} from './migration-types.ts';\nimport {\n    getSingleDocument,\n    hasEncryption,\n    observeSingle,\n    writeSingle\n} from '../../rx-storage-helper.ts';\nimport {\n    BroadcastChannel,\n    createLeaderElection\n} from 'broadcast-channel';\nimport {\n    META_INSTANCE_SCHEMA_TITLE,\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    cancelRxStorageReplication,\n    defaultConflictHandler,\n    getRxReplicationMetaInstanceSchema,\n    replicateRxStorageInstance,\n    rxStorageInstanceToReplicationHandler\n} from '../../replication-protocol/index.ts';\nimport { overwritable } from '../../overwritable.ts';\nimport {\n    INTERNAL_CONTEXT_MIGRATION_STATUS,\n    addConnectedStorageToCollection,\n    getPrimaryKeyOfInternalDocument\n} from '../../rx-database-internal-store.ts';\nimport { normalizeMangoQuery, prepareQuery } from '../../rx-query-helper.ts';\n\n\n\nexport class RxMigrationState {\n\n    public database: RxDatabase;\n\n\n    private started: boolean = false;\n    public readonly oldCollectionMeta: ReturnType<typeof getOldCollectionMeta>;\n    public readonly mustMigrate: ReturnType<typeof mustMigrate>;\n    public readonly statusDocId: string;\n    public readonly $: Observable<RxMigrationStatus>;\n    public replicationState?: RxStorageInstanceReplicationState<any>;\n    public canceled: boolean = false;\n    public broadcastChannel?: BroadcastChannel;\n    constructor(\n        public readonly collection: RxCollection,\n        public readonly migrationStrategies: NumberFunctionMap,\n        public readonly statusDocKey = [\n            collection.name,\n            'v',\n            collection.schema.version\n        ].join('-'),\n    ) {\n        this.database = collection.database;\n        this.oldCollectionMeta = getOldCollectionMeta(this);\n        this.mustMigrate = mustMigrate(this);\n        this.statusDocId = getPrimaryKeyOfInternalDocument(\n            this.statusDocKey,\n            INTERNAL_CONTEXT_MIGRATION_STATUS\n        );\n        addMigrationStateToDatabase(this);\n\n        this.$ = observeSingle<RxMigrationStatusDocument>(\n            this.database.internalStore,\n            this.statusDocId\n        ).pipe(\n            filter(d => !!d),\n            map(d => ensureNotFalsy(d).data),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    getStatus() {\n        return firstValueFrom(this.$);\n    }\n\n\n    /**\n     * Starts the migration.\n     * Returns void so that people to not get the idea to await\n     * this function.\n     * Instead use migratePromise() if you want to await\n     * the migration. This ensures it works even if the migration\n     * is run on a different browser tab.\n     */\n    async startMigration(batchSize: number = MIGRATION_DEFAULT_BATCH_SIZE): Promise<void> {\n        const must = await this.mustMigrate;\n        if (!must) {\n            return;\n        }\n        if (this.started) {\n            throw newRxError('DM1');\n        }\n        this.started = true;\n\n\n        /**\n         * To ensure that multiple tabs do not migrate the same collection,\n         * we use a new broadcastChannel/leaderElector for each collection.\n         * This is required because collections can be added dynamically and\n         * not all tabs might know about this collection.\n         */\n        if (this.database.multiInstance) {\n            this.broadcastChannel = new BroadcastChannel([\n                'rx-migration-state',\n                this.database.name,\n                this.collection.name,\n                this.collection.schema.version\n            ].join('|'));\n            const leaderElector = createLeaderElection(this.broadcastChannel);\n            await leaderElector.awaitLeadership();\n        }\n\n        /**\n         * Instead of writing a custom migration protocol,\n         * we do a push-only replication from the old collection data to the new one.\n         * This also ensure that restarting the replication works without problems.\n         */\n        const oldCollectionMeta = await this.oldCollectionMeta;\n        const oldStorageInstance = await this.database.storage.createStorageInstance({\n            databaseName: this.database.name,\n            collectionName: this.collection.name,\n            databaseInstanceToken: this.database.token,\n            multiInstance: this.database.multiInstance,\n            options: {},\n            schema: ensureNotFalsy(oldCollectionMeta).data.schema,\n            password: this.database.password,\n            devMode: overwritable.isDevMode()\n        });\n\n\n        const connectedInstances = await this.getConnectedStorageInstances();\n\n\n        /**\n         * Initially write the migration status into a meta document.\n         */\n        const totalCount = await this.countAllDocuments(\n            [oldStorageInstance].concat(connectedInstances.map(r => r.oldStorage))\n        );\n        await this.updateStatus(s => {\n            s.count.total = totalCount;\n            return s;\n        });\n\n\n        try {\n            /**\n             * First migrate the connected storages,\n             * afterwards migrate the normal collection.\n            */\n            await Promise.all(\n                connectedInstances.map(async (connectedInstance) => {\n                    await addConnectedStorageToCollection(\n                        this.collection,\n                        connectedInstance.newStorage.collectionName,\n                        connectedInstance.newStorage.schema\n                    );\n                    await this.migrateStorage(\n                        connectedInstance.oldStorage,\n                        connectedInstance.newStorage,\n                        batchSize\n                    );\n                    await connectedInstance.newStorage.close();\n                })\n            );\n\n            await this.migrateStorage(\n                oldStorageInstance,\n                /**\n                 * Use the originalStorageInstance here\n                 * so that the _meta.lwt time keeps the same\n                 * and our replication checkpoints still point to the\n                 * correct checkpoint.\n                */\n                this.collection.storageInstance.originalStorageInstance,\n                batchSize\n            );\n        } catch (err) {\n            await oldStorageInstance.close();\n            await this.updateStatus(s => {\n                s.status = 'ERROR';\n                s.error = errorToPlainJson(err as Error);\n                return s;\n            });\n            return;\n        }\n\n        // remove old collection meta doc\n        try {\n            await writeSingle(\n                this.database.internalStore,\n                {\n                    previous: oldCollectionMeta,\n                    document: Object.assign(\n                        {},\n                        oldCollectionMeta,\n                        {\n                            _deleted: true\n                        }\n                    )\n                },\n                'rx-migration-remove-collection-meta'\n            );\n        } catch (error) {\n            const isConflict = isBulkWriteConflictError<InternalStoreCollectionDocType>(error);\n            if (isConflict && !!isConflict.documentInDb._deleted) {\n            } else {\n                throw error;\n            }\n        }\n\n        await this.updateStatus(s => {\n            s.status = 'DONE';\n            return s;\n        });\n        if (this.broadcastChannel) {\n            await this.broadcastChannel.close();\n        }\n    }\n\n    public updateStatusHandlers: MigrationStatusUpdate[] = [];\n    public updateStatusQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\n    public updateStatus(\n        handler: MigrationStatusUpdate\n    ) {\n        this.updateStatusHandlers.push(handler);\n        this.updateStatusQueue = this.updateStatusQueue.then(async () => {\n            if (this.updateStatusHandlers.length === 0) {\n                return;\n            }\n            // re-run until no conflict\n            const useHandlers = this.updateStatusHandlers;\n            this.updateStatusHandlers = [];\n            while (true) {\n                const previous = await getSingleDocument<RxMigrationStatusDocument>(\n                    this.database.internalStore,\n                    this.statusDocId\n                );\n                let newDoc = clone(previous);\n                if (!previous) {\n                    newDoc = {\n                        id: this.statusDocId,\n                        key: this.statusDocKey,\n                        context: INTERNAL_CONTEXT_MIGRATION_STATUS,\n                        data: {\n                            collectionName: this.collection.name,\n                            status: 'RUNNING',\n                            count: {\n                                total: 0,\n                                handled: 0,\n                                percent: 0\n                            }\n                        },\n                        _deleted: false,\n                        _meta: getDefaultRxDocumentMeta(),\n                        _rev: getDefaultRevision(),\n                        _attachments: {}\n                    };\n                }\n\n                let status = ensureNotFalsy(newDoc).data;\n                for (const oneHandler of useHandlers) {\n                    status = oneHandler(status);\n                }\n                status.count.percent = Math.round((status.count.handled / status.count.total) * 100);\n\n                if (\n                    newDoc && previous &&\n                    deepEqual(newDoc.data, previous.data)\n                ) {\n                    break;\n                }\n\n\n                try {\n                    await writeSingle<RxMigrationStatusDocument>(\n                        this.database.internalStore,\n                        {\n                            previous,\n                            document: ensureNotFalsy(newDoc)\n                        },\n                        INTERNAL_CONTEXT_MIGRATION_STATUS\n                    );\n\n                    // write successful\n                    break;\n                } catch (err) {\n                    // ignore conflicts\n                    if (!isBulkWriteConflictError(err)) {\n                        throw err;\n                    }\n                }\n            }\n        });\n        return this.updateStatusQueue;\n    }\n\n\n    public async migrateStorage(\n        oldStorage: RxStorageInstance<any, any, any>,\n        newStorage: RxStorageInstance<any, any, any>,\n        batchSize: number\n    ) {\n\n        this.collection.onClose.push(() => this.cancel());\n        this.database.onClose.push(() => this.cancel());\n        const replicationMetaStorageInstance = await this.database.storage.createStorageInstance({\n            databaseName: this.database.name,\n            collectionName: 'rx-migration-state-meta-' + oldStorage.collectionName + '-' + oldStorage.schema.version,\n            databaseInstanceToken: this.database.token,\n            multiInstance: this.database.multiInstance,\n            options: {},\n            schema: getRxReplicationMetaInstanceSchema(oldStorage.schema, hasEncryption(oldStorage.schema)),\n            password: this.database.password,\n            devMode: overwritable.isDevMode()\n        });\n\n        const replicationHandlerBase = rxStorageInstanceToReplicationHandler(\n            newStorage,\n            /**\n             * Ignore push-conflicts.\n             * If this happens we drop the 'old' document state.\n             */\n            defaultConflictHandler,\n            this.database.token,\n            true\n        );\n\n        const replicationState = replicateRxStorageInstance({\n            keepMeta: true,\n            identifier: [\n                'rx-migration-state',\n                oldStorage.collectionName,\n                oldStorage.schema.version,\n                this.collection.schema.version\n            ].join('-'),\n            replicationHandler: {\n                masterChangesSince() {\n                    return Promise.resolve({\n                        checkpoint: null,\n                        documents: []\n                    });\n                },\n                masterWrite: async (rows) => {\n                    let migratedRows = await Promise.all(\n                        rows\n                            .map(async (row) => {\n                                let newDocData = row.newDocumentState;\n                                if (newStorage.schema.title === META_INSTANCE_SCHEMA_TITLE) {\n                                    newDocData = row.newDocumentState.docData;\n                                    if (row.newDocumentState.isCheckpoint === '1') {\n                                        return {\n                                            assumedMasterState: undefined,\n                                            newDocumentState: row.newDocumentState\n                                        };\n                                    }\n                                }\n                                const migratedDocData: RxReplicationWriteToMasterRow<any> = await migrateDocumentData(\n                                    this.collection,\n                                    oldStorage.schema.version,\n                                    newDocData\n                                );\n\n                                /**\n                                 * The migration strategy can return null\n                                 * which means the document must be deleted during migration.\n                                 */\n                                if (migratedDocData === null) {\n                                    return null;\n                                }\n\n                                const newRow: RxReplicationWriteToMasterRow<any> = {\n                                    // drop the assumed master state, we do not have to care about conflicts here.\n                                    assumedMasterState: undefined,\n                                    newDocumentState: newStorage.schema.title === META_INSTANCE_SCHEMA_TITLE\n                                        ? Object.assign({}, row.newDocumentState, { docData: migratedDocData })\n                                        : migratedDocData\n                                };\n\n                                return newRow;\n                            })\n                    );\n\n                    // filter out the documents where the migration strategy returned null\n                    migratedRows = migratedRows.filter(row => !!row && !!row.newDocumentState);\n\n                    const result = await replicationHandlerBase.masterWrite(migratedRows as any);\n                    return result;\n                },\n                masterChangeStream$: new Subject<any>().asObservable()\n            },\n            forkInstance: oldStorage,\n            metaInstance: replicationMetaStorageInstance,\n            pushBatchSize: batchSize,\n            pullBatchSize: 0,\n            conflictHandler: defaultConflictHandler,\n            hashFunction: this.database.hashFunction\n        });\n\n\n        let hasError: RxError | RxTypeError | false = false;\n        replicationState.events.error.subscribe(err => hasError = err);\n\n        // update replication status on each change\n        replicationState.events.processed.up.subscribe(() => {\n            this.updateStatus(status => {\n                status.count.handled = status.count.handled + 1;\n                return status;\n            });\n        });\n\n        await awaitRxStorageReplicationFirstInSync(replicationState);\n        await awaitRxStorageReplicationInSync(replicationState);\n\n        await this.updateStatusQueue;\n        if (hasError) {\n            await replicationMetaStorageInstance.close();\n            throw hasError;\n        }\n\n        // cleanup old storages\n        await Promise.all([\n            oldStorage.remove(),\n            replicationMetaStorageInstance.remove()\n        ]);\n\n        await this.cancel();\n    }\n\n    /**\n     * Stops the migration.\n     * Mostly used in tests to simulate what happens\n     * when the user reloads the page during a migration.\n     */\n    public async cancel() {\n        this.canceled = true;\n        if (this.replicationState) {\n            await cancelRxStorageReplication(this.replicationState);\n        }\n        if (this.broadcastChannel) {\n            await this.broadcastChannel.close();\n        }\n    }\n\n    public async countAllDocuments(\n        storageInstances: RxStorageInstance<any, any, any>[]\n    ): Promise<number> {\n        let ret = 0;\n        await Promise.all(\n            storageInstances.map(async (instance) => {\n\n                const preparedQuery = prepareQuery(\n                    instance.schema,\n                    normalizeMangoQuery(\n                        instance.schema,\n                        {\n                            selector: {}\n                        }\n                    )\n                );\n                const countResult = await instance.count(preparedQuery);\n                ret += countResult.count;\n            })\n        );\n        return ret;\n    }\n\n    public async getConnectedStorageInstances() {\n        const oldCollectionMeta = ensureNotFalsy(await this.oldCollectionMeta);\n        const ret: {\n            oldStorage: RxStorageInstance<any, any, any>;\n            newStorage: RxStorageInstance<any, any, any>;\n        }[] = [];\n\n        await Promise.all(\n            await Promise.all(\n                oldCollectionMeta\n                    .data\n                    .connectedStorages\n                    .map(async (connectedStorage) => {\n\n                        // atm we can only migrate replication states.\n                        if (connectedStorage.schema.title !== META_INSTANCE_SCHEMA_TITLE) {\n                            throw new Error('unknown migration handling for schema');\n                        }\n\n                        const newSchema = getRxReplicationMetaInstanceSchema(\n                            clone(this.collection.schema.jsonSchema),\n                            hasEncryption(connectedStorage.schema)\n                        );\n                        newSchema.version = this.collection.schema.version;\n                        const [oldStorage, newStorage] = await Promise.all([\n                            this.database.storage.createStorageInstance({\n                                databaseInstanceToken: this.database.token,\n                                databaseName: this.database.name,\n                                devMode: overwritable.isDevMode(),\n                                multiInstance: this.database.multiInstance,\n                                options: {},\n                                schema: connectedStorage.schema,\n                                password: this.database.password,\n                                collectionName: connectedStorage.collectionName\n                            }),\n                            this.database.storage.createStorageInstance({\n                                databaseInstanceToken: this.database.token,\n                                databaseName: this.database.name,\n                                devMode: overwritable.isDevMode(),\n                                multiInstance: this.database.multiInstance,\n                                options: {},\n                                schema: newSchema,\n                                password: this.database.password,\n                                collectionName: connectedStorage.collectionName\n                            })\n                        ]);\n                        ret.push({ oldStorage, newStorage });\n                    })\n            )\n        );\n\n        return ret;\n    }\n\n\n\n    async migratePromise(batchSize?: number): Promise<RxMigrationStatus> {\n        this.startMigration(batchSize);\n        const must = await this.mustMigrate;\n        if (!must) {\n            return {\n                status: 'DONE',\n                collectionName: this.collection.name,\n                count: {\n                    handled: 0,\n                    percent: 0,\n                    total: 0\n                }\n            };\n        }\n\n        const result = await Promise.race([\n            firstValueFrom(\n                this.$.pipe(\n                    filter(d => d.status === 'DONE')\n                )\n            ),\n            firstValueFrom(\n                this.$.pipe(\n                    filter(d => d.status === 'ERROR')\n                )\n            )\n        ]);\n\n        if (result.status === 'ERROR') {\n            throw newRxError('DM4', {\n                collection: this.collection.name,\n                error: result.error\n            });\n        } else {\n            return result;\n        }\n\n    }\n}\n"],"mappings":"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","ignoreList":[]}