{
  "version": 3,
  "sources": ["../../../../../../node_modules/rxdb/dist/esm/plugin-helpers.js"],
  "sourcesContent": ["import { filter, mergeMap, tap } from 'rxjs/operators';\nimport { getPrimaryFieldOfPrimaryKey } from \"./rx-schema-helper.js\";\nimport { flatClone, getFromMapOrCreate, requestIdleCallbackIfAvailable } from \"./plugins/utils/index.js\";\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\n\n/**\n * Returns the validation errors.\n * If document is fully valid, returns an empty array.\n */\n\n/**\n * cache the validators by the schema string\n * so we can reuse them when multiple collections have the same schema\n *\n * Notice: to make it easier and not dependent on a hash function,\n * we use the plain json string.\n */\nvar VALIDATOR_CACHE_BY_VALIDATOR_KEY = new Map();\n\n/**\n * This factory is used in the validation plugins\n * so that we can reuse the basic storage wrapping code.\n */\nexport function wrappedValidateStorageFactory(\n/**\n * Returns a method that can be used to validate\n * documents and throws when the document is not valid.\n */\ngetValidator,\n/**\n * A string to identify the validation library.\n */\nvalidatorKey) {\n  var VALIDATOR_CACHE = getFromMapOrCreate(VALIDATOR_CACHE_BY_VALIDATOR_KEY, validatorKey, () => new Map());\n  function initValidator(schema) {\n    return getFromMapOrCreate(VALIDATOR_CACHE, JSON.stringify(schema), () => getValidator(schema));\n  }\n  return args => {\n    return Object.assign({}, args.storage, {\n      name: 'validate-' + validatorKey + '-' + args.storage.name,\n      async createStorageInstance(params) {\n        var instance = await args.storage.createStorageInstance(params);\n        var primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n        /**\n         * Lazy initialize the validator\n         * to save initial page load performance.\n         * Some libraries take really long to initialize the validator\n         * from the schema.\n         */\n        var validatorCached;\n        requestIdleCallbackIfAvailable(() => validatorCached = initValidator(params.schema));\n        var oldBulkWrite = instance.bulkWrite.bind(instance);\n        instance.bulkWrite = (documentWrites, context) => {\n          if (!validatorCached) {\n            validatorCached = initValidator(params.schema);\n          }\n          var errors = [];\n          var continueWrites = [];\n          documentWrites.forEach(row => {\n            var documentId = row.document[primaryPath];\n            var validationErrors = validatorCached(row.document);\n            if (validationErrors.length > 0) {\n              errors.push({\n                status: 422,\n                isError: true,\n                documentId,\n                writeRow: row,\n                validationErrors,\n                schema: instance.schema\n              });\n            } else {\n              continueWrites.push(row);\n            }\n          });\n          var writePromise = continueWrites.length > 0 ? oldBulkWrite(continueWrites, context) : Promise.resolve({\n            error: [],\n            success: []\n          });\n          return writePromise.then(writeResult => {\n            errors.forEach(validationError => {\n              writeResult.error.push(validationError);\n            });\n            return writeResult;\n          });\n        };\n        return instance;\n      }\n    });\n  };\n}\n\n/**\n * Used in plugins to easily modify all in- and outgoing\n * data of that storage instance.\n */\nexport function wrapRxStorageInstance(originalSchema, instance, modifyToStorage, modifyFromStorage, modifyAttachmentFromStorage = v => v) {\n  async function toStorage(docData) {\n    if (!docData) {\n      return docData;\n    }\n    return await modifyToStorage(docData);\n  }\n  async function fromStorage(docData) {\n    if (!docData) {\n      return docData;\n    }\n    return await modifyFromStorage(docData);\n  }\n  async function errorFromStorage(error) {\n    var ret = flatClone(error);\n    ret.writeRow = flatClone(ret.writeRow);\n    if (ret.documentInDb) {\n      ret.documentInDb = await fromStorage(ret.documentInDb);\n    }\n    if (ret.writeRow.previous) {\n      ret.writeRow.previous = await fromStorage(ret.writeRow.previous);\n    }\n    ret.writeRow.document = await fromStorage(ret.writeRow.document);\n    return ret;\n  }\n  var processingChangesCount$ = new BehaviorSubject(0);\n  var wrappedInstance = {\n    databaseName: instance.databaseName,\n    internals: instance.internals,\n    cleanup: instance.cleanup.bind(instance),\n    options: instance.options,\n    close: instance.close.bind(instance),\n    schema: originalSchema,\n    collectionName: instance.collectionName,\n    count: instance.count.bind(instance),\n    remove: instance.remove.bind(instance),\n    originalStorageInstance: instance,\n    bulkWrite: async (documentWrites, context) => {\n      var useRows = [];\n      await Promise.all(documentWrites.map(async row => {\n        var [previous, document] = await Promise.all([row.previous ? toStorage(row.previous) : undefined, toStorage(row.document)]);\n        useRows.push({\n          previous,\n          document\n        });\n      }));\n      var writeResult = await instance.bulkWrite(useRows, context);\n      var ret = {\n        error: []\n      };\n      var promises = [];\n      writeResult.error.forEach(error => {\n        promises.push(errorFromStorage(error).then(err => ret.error.push(err)));\n      });\n      await Promise.all(promises);\n\n      /**\n       * By definition, all change events must be emitted\n       * BEFORE the write call resolves.\n       * To ensure that even when the modifiers are async,\n       * we wait here until the processing queue is empty.\n       */\n      await firstValueFrom(processingChangesCount$.pipe(filter(v => v === 0)));\n      return ret;\n    },\n    query: preparedQuery => {\n      return instance.query(preparedQuery).then(queryResult => {\n        return Promise.all(queryResult.documents.map(doc => fromStorage(doc)));\n      }).then(documents => ({\n        documents: documents\n      }));\n    },\n    getAttachmentData: async (documentId, attachmentId, digest) => {\n      var data = await instance.getAttachmentData(documentId, attachmentId, digest);\n      data = await modifyAttachmentFromStorage(data);\n      return data;\n    },\n    findDocumentsById: (ids, deleted) => {\n      return instance.findDocumentsById(ids, deleted).then(async findResult => {\n        var ret = [];\n        await Promise.all(findResult.map(async doc => {\n          ret.push(await fromStorage(doc));\n        }));\n        return ret;\n      });\n    },\n    getChangedDocumentsSince: !instance.getChangedDocumentsSince ? undefined : (limit, checkpoint) => {\n      return instance.getChangedDocumentsSince(limit, checkpoint).then(async result => {\n        return {\n          checkpoint: result.checkpoint,\n          documents: await Promise.all(result.documents.map(d => fromStorage(d)))\n        };\n      });\n    },\n    changeStream: () => {\n      return instance.changeStream().pipe(tap(() => processingChangesCount$.next(processingChangesCount$.getValue() + 1)), mergeMap(async eventBulk => {\n        var useEvents = await Promise.all(eventBulk.events.map(async event => {\n          var [documentData, previousDocumentData] = await Promise.all([fromStorage(event.documentData), fromStorage(event.previousDocumentData)]);\n          var ev = {\n            operation: event.operation,\n            documentId: event.documentId,\n            documentData: documentData,\n            previousDocumentData: previousDocumentData,\n            isLocal: false\n          };\n          return ev;\n        }));\n        var ret = {\n          id: eventBulk.id,\n          events: useEvents,\n          checkpoint: eventBulk.checkpoint,\n          context: eventBulk.context\n        };\n        return ret;\n      }), tap(() => processingChangesCount$.next(processingChangesCount$.getValue() - 1)));\n    }\n  };\n  return wrappedInstance;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAiBA,IAAI,mCAAmC,oBAAI,IAAI;AAMxC,SAAS,8BAKhB,cAIA,cAAc;AACZ,MAAI,kBAAkB,mBAAmB,kCAAkC,cAAc,MAAM,oBAAI,IAAI,CAAC;AACxG,WAAS,cAAc,QAAQ;AAC7B,WAAO,mBAAmB,iBAAiB,KAAK,UAAU,MAAM,GAAG,MAAM,aAAa,MAAM,CAAC;AAAA,EAC/F;AACA,SAAO,UAAQ;AACb,WAAO,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS;AAAA,MACrC,MAAM,cAAc,eAAe,MAAM,KAAK,QAAQ;AAAA,MAChD,sBAAsB,QAAQ;AAAA;AAClC,cAAI,WAAW,MAAM,KAAK,QAAQ,sBAAsB,MAAM;AAC9D,cAAI,cAAc,4BAA4B,OAAO,OAAO,UAAU;AAQtE,cAAI;AACJ,yCAA+B,MAAM,kBAAkB,cAAc,OAAO,MAAM,CAAC;AACnF,cAAI,eAAe,SAAS,UAAU,KAAK,QAAQ;AACnD,mBAAS,YAAY,CAAC,gBAAgB,YAAY;AAChD,gBAAI,CAAC,iBAAiB;AACpB,gCAAkB,cAAc,OAAO,MAAM;AAAA,YAC/C;AACA,gBAAI,SAAS,CAAC;AACd,gBAAI,iBAAiB,CAAC;AACtB,2BAAe,QAAQ,SAAO;AAC5B,kBAAI,aAAa,IAAI,SAAS,WAAW;AACzC,kBAAI,mBAAmB,gBAAgB,IAAI,QAAQ;AACnD,kBAAI,iBAAiB,SAAS,GAAG;AAC/B,uBAAO,KAAK;AAAA,kBACV,QAAQ;AAAA,kBACR,SAAS;AAAA,kBACT;AAAA,kBACA,UAAU;AAAA,kBACV;AAAA,kBACA,QAAQ,SAAS;AAAA,gBACnB,CAAC;AAAA,cACH,OAAO;AACL,+BAAe,KAAK,GAAG;AAAA,cACzB;AAAA,YACF,CAAC;AACD,gBAAI,eAAe,eAAe,SAAS,IAAI,aAAa,gBAAgB,OAAO,IAAI,QAAQ,QAAQ;AAAA,cACrG,OAAO,CAAC;AAAA,cACR,SAAS,CAAC;AAAA,YACZ,CAAC;AACD,mBAAO,aAAa,KAAK,iBAAe;AACtC,qBAAO,QAAQ,qBAAmB;AAChC,4BAAY,MAAM,KAAK,eAAe;AAAA,cACxC,CAAC;AACD,qBAAO;AAAA,YACT,CAAC;AAAA,UACH;AACA,iBAAO;AAAA,QACT;AAAA;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAMO,SAAS,sBAAsB,gBAAgB,UAAU,iBAAiB,mBAAmB,8BAA8B,OAAK,GAAG;AACxI,WAAe,UAAU,SAAS;AAAA;AAChC,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,MACT;AACA,aAAO,MAAM,gBAAgB,OAAO;AAAA,IACtC;AAAA;AACA,WAAe,YAAY,SAAS;AAAA;AAClC,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,MACT;AACA,aAAO,MAAM,kBAAkB,OAAO;AAAA,IACxC;AAAA;AACA,WAAe,iBAAiB,OAAO;AAAA;AACrC,UAAI,MAAM,UAAU,KAAK;AACzB,UAAI,WAAW,UAAU,IAAI,QAAQ;AACrC,UAAI,IAAI,cAAc;AACpB,YAAI,eAAe,MAAM,YAAY,IAAI,YAAY;AAAA,MACvD;AACA,UAAI,IAAI,SAAS,UAAU;AACzB,YAAI,SAAS,WAAW,MAAM,YAAY,IAAI,SAAS,QAAQ;AAAA,MACjE;AACA,UAAI,SAAS,WAAW,MAAM,YAAY,IAAI,SAAS,QAAQ;AAC/D,aAAO;AAAA,IACT;AAAA;AACA,MAAI,0BAA0B,IAAI,gBAAgB,CAAC;AACnD,MAAI,kBAAkB;AAAA,IACpB,cAAc,SAAS;AAAA,IACvB,WAAW,SAAS;AAAA,IACpB,SAAS,SAAS,QAAQ,KAAK,QAAQ;AAAA,IACvC,SAAS,SAAS;AAAA,IAClB,OAAO,SAAS,MAAM,KAAK,QAAQ;AAAA,IACnC,QAAQ;AAAA,IACR,gBAAgB,SAAS;AAAA,IACzB,OAAO,SAAS,MAAM,KAAK,QAAQ;AAAA,IACnC,QAAQ,SAAS,OAAO,KAAK,QAAQ;AAAA,IACrC,yBAAyB;AAAA,IACzB,WAAW,CAAO,gBAAgB,YAAY;AAC5C,UAAI,UAAU,CAAC;AACf,YAAM,QAAQ,IAAI,eAAe,IAAI,CAAM,QAAO;AAChD,YAAI,CAAC,UAAU,QAAQ,IAAI,MAAM,QAAQ,IAAI,CAAC,IAAI,WAAW,UAAU,IAAI,QAAQ,IAAI,QAAW,UAAU,IAAI,QAAQ,CAAC,CAAC;AAC1H,gBAAQ,KAAK;AAAA,UACX;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH,EAAC,CAAC;AACF,UAAI,cAAc,MAAM,SAAS,UAAU,SAAS,OAAO;AAC3D,UAAI,MAAM;AAAA,QACR,OAAO,CAAC;AAAA,MACV;AACA,UAAI,WAAW,CAAC;AAChB,kBAAY,MAAM,QAAQ,WAAS;AACjC,iBAAS,KAAK,iBAAiB,KAAK,EAAE,KAAK,SAAO,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC;AAAA,MACxE,CAAC;AACD,YAAM,QAAQ,IAAI,QAAQ;AAQ1B,YAAM,eAAe,wBAAwB,KAAK,OAAO,OAAK,MAAM,CAAC,CAAC,CAAC;AACvE,aAAO;AAAA,IACT;AAAA,IACA,OAAO,mBAAiB;AACtB,aAAO,SAAS,MAAM,aAAa,EAAE,KAAK,iBAAe;AACvD,eAAO,QAAQ,IAAI,YAAY,UAAU,IAAI,SAAO,YAAY,GAAG,CAAC,CAAC;AAAA,MACvE,CAAC,EAAE,KAAK,gBAAc;AAAA,QACpB;AAAA,MACF,EAAE;AAAA,IACJ;AAAA,IACA,mBAAmB,CAAO,YAAY,cAAc,WAAW;AAC7D,UAAI,OAAO,MAAM,SAAS,kBAAkB,YAAY,cAAc,MAAM;AAC5E,aAAO,MAAM,4BAA4B,IAAI;AAC7C,aAAO;AAAA,IACT;AAAA,IACA,mBAAmB,CAAC,KAAK,YAAY;AACnC,aAAO,SAAS,kBAAkB,KAAK,OAAO,EAAE,KAAK,CAAM,eAAc;AACvE,YAAI,MAAM,CAAC;AACX,cAAM,QAAQ,IAAI,WAAW,IAAI,CAAM,QAAO;AAC5C,cAAI,KAAK,MAAM,YAAY,GAAG,CAAC;AAAA,QACjC,EAAC,CAAC;AACF,eAAO;AAAA,MACT,EAAC;AAAA,IACH;AAAA,IACA,0BAA0B,CAAC,SAAS,2BAA2B,SAAY,CAAC,OAAO,eAAe;AAChG,aAAO,SAAS,yBAAyB,OAAO,UAAU,EAAE,KAAK,CAAM,WAAU;AAC/E,eAAO;AAAA,UACL,YAAY,OAAO;AAAA,UACnB,WAAW,MAAM,QAAQ,IAAI,OAAO,UAAU,IAAI,OAAK,YAAY,CAAC,CAAC,CAAC;AAAA,QACxE;AAAA,MACF,EAAC;AAAA,IACH;AAAA,IACA,cAAc,MAAM;AAClB,aAAO,SAAS,aAAa,EAAE,KAAK,IAAI,MAAM,wBAAwB,KAAK,wBAAwB,SAAS,IAAI,CAAC,CAAC,GAAG,SAAS,CAAM,cAAa;AAC/I,YAAI,YAAY,MAAM,QAAQ,IAAI,UAAU,OAAO,IAAI,CAAM,UAAS;AACpE,cAAI,CAAC,cAAc,oBAAoB,IAAI,MAAM,QAAQ,IAAI,CAAC,YAAY,MAAM,YAAY,GAAG,YAAY,MAAM,oBAAoB,CAAC,CAAC;AACvI,cAAI,KAAK;AAAA,YACP,WAAW,MAAM;AAAA,YACjB,YAAY,MAAM;AAAA,YAClB;AAAA,YACA;AAAA,YACA,SAAS;AAAA,UACX;AACA,iBAAO;AAAA,QACT,EAAC,CAAC;AACF,YAAI,MAAM;AAAA,UACR,IAAI,UAAU;AAAA,UACd,QAAQ;AAAA,UACR,YAAY,UAAU;AAAA,UACtB,SAAS,UAAU;AAAA,QACrB;AACA,eAAO;AAAA,MACT,EAAC,GAAG,IAAI,MAAM,wBAAwB,KAAK,wBAAwB,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,IACrF;AAAA,EACF;AACA,SAAO;AACT;",
  "names": []
}
